<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>폭간의 기술블로그</title>
    <link>https://sejoung.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>잘정리하자</description>
    <pubDate>Thu, 22 Aug 2024 00:49:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>CHAPTER 19 Critique: 구글의 코드 리뷰 도구</title>
      <link>https://sejoung.github.io/2024/08/2024-08-22-Software_Engineering_at_Google_CHAPTER_19/</link>
      <guid>https://sejoung.github.io/2024/08/2024-08-22-Software_Engineering_at_Google_CHAPTER_19/</guid>
      <pubDate>Thu, 22 Aug 2024 00:21:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-IV-도구&quot;&gt;&lt;a href=&quot;#Part-IV-도구&quot; class=&quot;headerlink&quot; title=&quot;Part IV 도구&quot;&gt;&lt;/a&gt;Part IV 도구&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-19-Critique-구글의-코드-리뷰-도구&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-IV-도구"><a href="#Part-IV-도구" class="headerlink" title="Part IV 도구"></a>Part IV 도구</h1><h2 id="CHAPTER-19-Critique-구글의-코드-리뷰-도구"><a href="#CHAPTER-19-Critique-구글의-코드-리뷰-도구" class="headerlink" title="CHAPTER 19 Critique: 구글의 코드 리뷰 도구"></a>CHAPTER 19 Critique: 구글의 코드 리뷰 도구</h2><p>코드 리뷰는 소프트웨어 개발에서 없어서는 안 될 요소입니다.<br>특히 성장하기 위해 매우 중요한 요소입니다.</p><h3 id="코드-리뷰-도구-원칙"><a href="#코드-리뷰-도구-원칙" class="headerlink" title="코드 리뷰 도구 원칙"></a>코드 리뷰 도구 원칙</h3><ul><li>간결성<ul><li>가장 큰 영향을 준 원칙</li></ul></li><li>신뢰 제공</li><li>익숙한 소통 방식</li><li>워크플로 통합</li></ul><h3 id="코드-리뷰-흐름"><a href="#코드-리뷰-흐름" class="headerlink" title="코드 리뷰 흐름"></a>코드 리뷰 흐름</h3><ul><li>변경 생성</li><li>리뷰 요청</li><li>변경 이해하고 댓글 달기</li><li>변경 수정 및 댓글에 답하기</li><li>변경 승인</li><li>변경 커밋</li></ul><h3 id="1단계-변경-생성"><a href="#1단계-변경-생성" class="headerlink" title="1단계: 변경 생성"></a>1단계: 변경 생성</h3><ul><li>디프, 차이점 보여주기</li><li>분석 결과</li><li>긴밀한 도구 통합<h3 id="2단계-리뷰-요청"><a href="#2단계-리뷰-요청" class="headerlink" title="2단계: 리뷰 요청"></a>2단계: 리뷰 요청</h3>리뷰 요청 할때 리뷰어 선정이 어려운데 별칭으로 리뷰어를 선정하는 방법이 있다.</li></ul><h3 id="3-4단계-변경-이해하고-댓글-달기"><a href="#3-4단계-변경-이해하고-댓글-달기" class="headerlink" title="3~4단계: 변경 이해하고 댓글 달기"></a>3~4단계: 변경 이해하고 댓글 달기</h3><ul><li><p>댓글달기</p></li><li><p>변경의 상태 이해하기</p><ul><li>누구 차례 기능</li><li>대시보드 와 검색 시스템<h3 id="5단계-변경-승인-변경에-점수-매기기"><a href="#5단계-변경-승인-변경에-점수-매기기" class="headerlink" title="5단계: 변경 승인(변경에 점수 매기기)"></a>5단계: 변경 승인(변경에 점수 매기기)</h3>구글에서 변경에 점수를 매길 때 고려하는 요소</li></ul></li><li><p>LGTM</p></li><li><p>승인</p></li><li><p>미해결 댓글 개수</p></li></ul><h3 id="6단계-변경-커밋"><a href="#6단계-변경-커밋" class="headerlink" title="6단계: 변경 커밋"></a>6단계: 변경 커밋</h3><ul><li>커밋 후 : 뱐걍 이력 추적</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/08/2024-08-22-Software_Engineering_at_Google_CHAPTER_19/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 18 빌드 시스템과 빌드 철학</title>
      <link>https://sejoung.github.io/2024/08/2024-08-19-Software_Engineering_at_Google_CHAPTER_18/</link>
      <guid>https://sejoung.github.io/2024/08/2024-08-19-Software_Engineering_at_Google_CHAPTER_18/</guid>
      <pubDate>Mon, 19 Aug 2024 00:42:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-IV-도구&quot;&gt;&lt;a href=&quot;#Part-IV-도구&quot; class=&quot;headerlink&quot; title=&quot;Part IV 도구&quot;&gt;&lt;/a&gt;Part IV 도구&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-18-빌드-시스템과-빌드-철학&quot;&gt;&lt;a href
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-IV-도구"><a href="#Part-IV-도구" class="headerlink" title="Part IV 도구"></a>Part IV 도구</h1><h2 id="CHAPTER-18-빌드-시스템과-빌드-철학"><a href="#CHAPTER-18-빌드-시스템과-빌드-철학" class="headerlink" title="CHAPTER 18 빌드 시스템과 빌드 철학"></a>CHAPTER 18 빌드 시스템과 빌드 철학</h2><p>구글 엔지니어에게 빌드시스템은 사랑이다</p><h3 id="빌드-시스템의-목적"><a href="#빌드-시스템의-목적" class="headerlink" title="빌드 시스템의 목적"></a>빌드 시스템의 목적</h3><p>빌드 시스템의 목적</p><ul><li>속도 : 개발자가 명령 하나로 빌드를 수행하고 몇 초안에 결과 바이너리를 얻을 수 있어야 한다.</li><li>정확성 : 소스 파일과 기타 입력 데이터가 같다면 모든 개발자가 어떤 컴퓨터에서 빌드하더라고 항상 동일한 결과를 내어야 한다</li></ul><h3 id="빌드-시스템이-없다면"><a href="#빌드-시스템이-없다면" class="headerlink" title="빌드 시스템이 없다면?"></a>빌드 시스템이 없다면?</h3><p>빌드 환경 없이 프로젝트 규모를 확장하려 들면 온갖 난관에 부딪히게 된다</p><h4 id="컴파일러로-충분하지-않나"><a href="#컴파일러로-충분하지-않나" class="headerlink" title="컴파일러로 충분하지 않나?"></a>컴파일러로 충분하지 않나?</h4><p>의존 관계가 조금만 복잡해져도 귀찮고 오류가 잦은 작업이다</p><h4 id="쉘-스크립트가-출동한다면"><a href="#쉘-스크립트가-출동한다면" class="headerlink" title="쉘 스크립트가 출동한다면?"></a>쉘 스크립트가 출동한다면?</h4><ul><li>지루해진다</li><li>느리다</li></ul><h3 id="모던-빌드-시스템"><a href="#모던-빌드-시스템" class="headerlink" title="모던 빌드 시스템"></a>모던 빌드 시스템</h3><ul><li>핵심은 의존성</li><li>태스크 기반 빌드 시스템<ul><li>단점<ul><li>빌드 단계들을 병렬로 싱행하기 어렵다</li><li>증분 빌드를 수행하기 어렵다</li><li>스크립트를 유지보수하고 디버깅하기 어렵다</li></ul></li></ul></li><li>아티 팩트 기반 빌드 시스템<ul><li>도구도 의존성으로 취급</li><li>빌드 시스템 확장하기</li><li>외부 의존성 명확히 드러내기<h3 id="모듈과-의존성-다루기"><a href="#모듈과-의존성-다루기" class="headerlink" title="모듈과 의존성 다루기"></a>모듈과 의존성 다루기</h3></li></ul></li><li>작은 모듈 사용과 1:1:1 규칙</li><li>모듈 가시성 최소화</li><li>의존성관리<ul><li>내부 의존성</li><li>외부 의존성<ul><li>원-버전 규칙</li><li>전이 외부 의존성</li><li>외부 의존성을 이용해 빌드 결과 캐시</li><li>외부 의존성의 보안과 안정성</li></ul></li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/08/2024-08-19-Software_Engineering_at_Google_CHAPTER_18/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 17 Code Search</title>
      <link>https://sejoung.github.io/2024/08/2024-08-16-Software_Engineering_at_Google_CHAPTER_17/</link>
      <guid>https://sejoung.github.io/2024/08/2024-08-16-Software_Engineering_at_Google_CHAPTER_17/</guid>
      <pubDate>Fri, 16 Aug 2024 00:27:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-IV-도구&quot;&gt;&lt;a href=&quot;#Part-IV-도구&quot; class=&quot;headerlink&quot; title=&quot;Part IV 도구&quot;&gt;&lt;/a&gt;Part IV 도구&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-17-Code-Search&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-IV-도구"><a href="#Part-IV-도구" class="headerlink" title="Part IV 도구"></a>Part IV 도구</h1><h2 id="CHAPTER-17-Code-Search"><a href="#CHAPTER-17-Code-Search" class="headerlink" title="CHAPTER 17 Code Search"></a>CHAPTER 17 Code Search</h2><p>구글이 이용하는 코드 브라우징 및 검색 도구</p><h3 id="Code-Search-UI"><a href="#Code-Search-UI" class="headerlink" title="Code Search UI"></a>Code Search UI</h3><p>핵심요소는 검색창</p><p>파일 하나를 들여다 볼때 대부분은 토큰을 바로 클릭하여 관련 정보로 빠르게 이동 할수 있다</p><ul><li>이슈 트래커</li><li>코드 참조 클래스</li></ul><h3 id="구글-개발자가-Code-Search를-이용하는-방법"><a href="#구글-개발자가-Code-Search를-이용하는-방법" class="headerlink" title="구글 개발자가 Code Search를 이용하는 방법"></a>구글 개발자가 Code Search를 이용하는 방법</h3><p>코드에 대한 답을 찾고 코드의 의도를 분명하게 이해하는것</p><ul><li>어디에?</li><li>무엇을</li><li>어떻게</li><li>왜?</li><li>누가 언제?</li></ul><h3 id="독립된-웹-도구로-만든-이유"><a href="#독립된-웹-도구로-만든-이유" class="headerlink" title="독립된 웹 도구로 만든 이유"></a>독립된 웹 도구로 만든 이유</h3><ul><li>대규모 코드베이스 지원</li><li>설정 없이 모든 코드 보기</li><li>기능 특화</li><li>다른 도구에 통합</li><li>API 제공</li></ul><h3 id="규모가-설계에-미치는-영향"><a href="#규모가-설계에-미치는-영향" class="headerlink" title="규모가 설계에 미치는 영향"></a>규모가 설계에 미치는 영향</h3><ul><li>검색 쿼리 지연시간</li><li>인덱싱 지연시간</li></ul><h3 id="구글은-어떻게-구현했나"><a href="#구글은-어떻게-구현했나" class="headerlink" title="구글은 어떻게 구현했나?"></a>구글은 어떻게 구현했나?</h3><ul><li>검색 인덱스<ul><li>초기엔 트라이그램 기반의 방식</li><li>커스텀한 접미사 배열</li></ul></li><li>랭킹<ul><li>쿼리 독립적 시그널<ul><li>파일 조회수</li><li>파일로의 참조량</li></ul></li><li>쿼리 의존적 시그널</li><li>검출</li><li>결과 다양성<h3 id="구글이-선택한-트레이드오프"><a href="#구글이-선택한-트레이드오프" class="headerlink" title="구글이 선택한 트레이드오프"></a>구글이 선택한 트레이드오프</h3></li></ul></li><li>완벽성<ul><li>헤드 리포지터리</li><li>전부 vs 가장 관련성 높은 결과만</li><li>헤드 vs 브랜치 vs 모든 변경 이력 vs 작업 공간</li></ul></li><li>표현력<ul><li>토큰 vs 부분 문자열 vs 정규 표현식</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/08/2024-08-16-Software_Engineering_at_Google_CHAPTER_17/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 16 버전 관리와 브랜치 관리</title>
      <link>https://sejoung.github.io/2024/08/2024-08-12-Software_Engineering_at_Google_CHAPTER_16/</link>
      <guid>https://sejoung.github.io/2024/08/2024-08-12-Software_Engineering_at_Google_CHAPTER_16/</guid>
      <pubDate>Mon, 12 Aug 2024 00:35:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-IV-도구&quot;&gt;&lt;a href=&quot;#Part-IV-도구&quot; class=&quot;headerlink&quot; title=&quot;Part IV 도구&quot;&gt;&lt;/a&gt;Part IV 도구&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-16-버전-관리와-브랜치-관리&quot;&gt;&lt;a href
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-IV-도구"><a href="#Part-IV-도구" class="headerlink" title="Part IV 도구"></a>Part IV 도구</h1><h2 id="CHAPTER-16-버전-관리와-브랜치-관리"><a href="#CHAPTER-16-버전-관리와-브랜치-관리" class="headerlink" title="CHAPTER 16 버전 관리와 브랜치 관리"></a>CHAPTER 16 버전 관리와 브랜치 관리</h2><p>버전 관리 시스템은 가장 널리 쓰이는 소프트웨어 엔지니어링 도구</p><p>트렁크 기반 개발(Trunk-Based Development)이 확장성이 뛰어나기에 그 이유와 함깨 몇가지 제안</p><h3 id="버전-관리란"><a href="#버전-관리란" class="headerlink" title="버전 관리란?"></a>버전 관리란?</h3><p>VCS(Version Control System)은 파일의 시간에 따른 변경 기록을 추적하는 시스템<br>합의된 단일 진실 공급원(Single Source of Truth)을 제공</p><h4 id="버전관리가-중요한-이유"><a href="#버전관리가-중요한-이유" class="headerlink" title="버전관리가 중요한 이유"></a>버전관리가 중요한 이유</h4><p>버전관리는 디지털 협업이라는 새로운 업무방싱을 발전시키는 과정에서 함께 진화했다</p><p>소프트웨어 엔지니어링은 프로그래밍에 시간의 흐름을 통합한 개념이다<br>소스 코드 생성과 제품을 장기간 지속 관리하는것은 다르게 보고 있다</p><p>버전을 관리하려면 비용이 든다 하지만 이 비용은 아주 저렴하다</p><h4 id="중앙집중형-VCS-vs-분산형-VCS"><a href="#중앙집중형-VCS-vs-분산형-VCS" class="headerlink" title="중앙집중형 VCS vs 분산형 VCS"></a>중앙집중형 VCS vs 분산형 VCS</h4><ul><li>중앙집중형 VCS<ul><li>단 하나의 중앙 리포지터리를 이용하는 모델</li><li>CVS, Subversion</li></ul></li><li>분산형 VCS<ul><li>각 개발자가 자신의 로컬 리포지터리를 가지고 중앙 리포지터리와 동기화하는 모델</li><li>Git, Mercurial</li></ul></li><li>진실 공급원<ul><li>중앙집중형 VCS는 진싱 공급원이라는 개념을 사용한다</li><li>분산형 VCS는 진실 공급원이라는 개념을 사용하지 않는다<h4 id="버전-관리-VS-의존성-관리"><a href="#버전-관리-VS-의존성-관리" class="headerlink" title="버전 관리 VS 의존성 관리"></a>버전 관리 VS 의존성 관리</h4>차이점</li></ul></li><li>VCS는 주로 코드를 어떻게 관리할지를 다루고 대체로 훨씬 세세하게 관리</li><li>의존성 관리는 훨씬 어렵다 다른 조직에서 통제하는 프로젝트들을 관리해야 하기 때문</li></ul><h3 id="브랜치-관리"><a href="#브랜치-관리" class="headerlink" title="브랜치 관리"></a>브랜치 관리</h3><p>상이한 버전들을 관리하는 방식을 통틀어 관리 방식을 통틀어 브랜치 관리가고 한다</p><ul><li>진행 중인 작업은 브랜치와 비슷하다</li><li>개발 브랜치<ul><li>구현은 다했지만 커멋하지 않았어요 와 이제부터 이코드 기준으로 개발하세요의 중간단계</li><li>개발 브랜치에 의존하는 방식은 확장하는 한계가 있다</li></ul></li><li>릴리즈 브랜치<ul><li>하루에도 몇번씩 릴리스할 수 있는 지속적 배포가 잘 자리 잡은 조직에서는 대체로 릴리스 브랜치를 건너 뛴다</li></ul></li></ul><h3 id="버전-관리-구글"><a href="#버전-관리-구글" class="headerlink" title="버전 관리 @ 구글"></a>버전 관리 @ 구글</h3><p>구글의 소스 코드 대부분은 하나의 리포지터리 즉 모노리포에서 관리 됨</p><ul><li>원 버전<ul><li>모든 의존성의 우리 리포지터리에 담겨 있고 각 의존성은 단하나의 안정된 버전만 존재해야 됨</li></ul></li><li>시나리오 여러 버전을 허용한다면<ul><li>여러 버전에 의존하더라고 실행 파일이 올바르게 작동되도록 해주는 트릭이 사용된다(쉐이딩)</li></ul></li><li>원버전 규칙<ul><li>개발자가 이 구성요소는 어떤 버전을 사용해야 하죠?라고 묻는 상황을 만들지 않아야 된다</li></ul></li><li>장수 브랜치는 웬만하면 금지<ul><li>빌드 호라이즌 정책</li><li>프로덕션 환경에서 구동 중인 모든 제품은 최대 6개월 안에 다시 빌드해야 재배포 해야 됨</li></ul></li><li>릴리즈 브런치는?<ul><li>많은 팀이 릴리즈 브랜치를 이용하고 최소한의 수정만 반영한다</li></ul></li></ul><h3 id="모노리포-단일-리포지터리"><a href="#모노리포-단일-리포지터리" class="headerlink" title="모노리포(단일 리포지터리)"></a>모노리포(단일 리포지터리)</h3><p>모노리포의 장점</p><ul><li>원-버전을 고수하기가 쉽다.</li><li>공식버전이나 중심 역할을 하는 리포지터리를 찾는 과정이 불필요하다</li><li>한 마디로 우리가 따르는 모노리포 방식이 모든 이에게 정답일 수는 없다<h3 id="버전-관리의-미래"><a href="#버전-관리의-미래" class="headerlink" title="버전 관리의 미래"></a>버전 관리의 미래</h3>선택에는 대가가 따른다</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/08/2024-08-12-Software_Engineering_at_Google_CHAPTER_16/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 15 폐기</title>
      <link>https://sejoung.github.io/2024/08/2024-08-09-Software_Engineering_at_Google_CHAPTER_15/</link>
      <guid>https://sejoung.github.io/2024/08/2024-08-09-Software_Engineering_at_Google_CHAPTER_15/</guid>
      <pubDate>Fri, 09 Aug 2024 00:50:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-III-프로세스&quot;&gt;&lt;a href=&quot;#Part-III-프로세스&quot; class=&quot;headerlink&quot; title=&quot;Part III 프로세스&quot;&gt;&lt;/a&gt;Part III 프로세스&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-15-폐기&quot;&gt;&lt;a hre
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-III-프로세스"><a href="#Part-III-프로세스" class="headerlink" title="Part III 프로세스"></a>Part III 프로세스</h1><h2 id="CHAPTER-15-폐기"><a href="#CHAPTER-15-폐기" class="headerlink" title="CHAPTER 15 폐기"></a>CHAPTER 15 폐기</h2><p>모든 시스템은 나이를 먹습니다.<br>소프트웨어는 디지털 자산이라서 물리적인 비트들 자체가 늙지 않는다.</p><p>이주를 순차적으로 시켜서 낡은 시스템을 완전히 걷어내는 과정은 폐기라 한다</p><h3 id="폐기시키는-이유"><a href="#폐기시키는-이유" class="headerlink" title="폐기시키는 이유"></a>폐기시키는 이유</h3><p>기본전재는 코드는 자산이 아니라 부채다 라는 기본 전재에서 시작함<br>코드가 부채가 아니라 자산이면 폐기 시킬이유가 어디 있을까?</p><p>코드는 자체는 가치를 창출하지 않는다 가치를 만들어내는 건 바로 기능<br>사용자 요구사항에 부합하는 기능은 자산이다</p><p>폐기대상을 신중하게 선택한 다음 집중해서 빠르게 완료하는게 중요</p><h3 id="폐기는-왜-그리-어려운가"><a href="#폐기는-왜-그리-어려운가" class="headerlink" title="폐기는 왜 그리 어려운가?"></a>폐기는 왜 그리 어려운가?</h3><p>하이럼의 법칙에 의해 시스템은 사용자 수가 늘수록 설계자가 예상하지 못한 전에 본 적 없는 방식으로 이용될 가능성이 높음</p><p>되니깐 쓰는 기능과 함께 이를 잘 활용하던 수많은 사용자까지 한꺼번에 떼어내어버린다</p><p>옛시스템에 대한 애착이 의외의 저항이 될수 도 있다</p><p>정치라는 관문도 통과 신기능 개발이 지연된다면 폐기시키는 편이 오히려 이득임을 이해관계자들에게 납득시키기가 더욱 어렵다</p><ul><li>설계 단계에서의 폐기<ul><li>내 제품의 고객이 잠재적인 대체품으로 이주하기가 얼마나 쉬울까?</li><li>내 시스템을 한 부분씩 점진적으로 교체하려면 어떻게 해야 할까?</li></ul></li></ul><h3 id="폐기-유형"><a href="#폐기-유형" class="headerlink" title="폐기 유형"></a>폐기 유형</h3><ul><li>권고 폐기<ul><li>희망 폐기</li></ul></li><li>강제 폐기</li><li>폐기 경고<ul><li>실행 가능성 과 적시성 <h3 id="폐기-프로세스-관리"><a href="#폐기-프로세스-관리" class="headerlink" title="폐기 프로세스 관리"></a>폐기 프로세스 관리</h3></li></ul></li><li>프로세스 소유자</li><li>마일스톤</li><li>폐기 도구<ul><li>발견</li><li>마이그레이션</li><li>퇴행 방지</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/08/2024-08-09-Software_Engineering_at_Google_CHAPTER_15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 14 더 큰 테스트</title>
      <link>https://sejoung.github.io/2024/07/2024-07-24-Software_Engineering_at_Google_CHAPTER_14/</link>
      <guid>https://sejoung.github.io/2024/07/2024-07-24-Software_Engineering_at_Google_CHAPTER_14/</guid>
      <pubDate>Wed, 24 Jul 2024 00:50:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-III-프로세스&quot;&gt;&lt;a href=&quot;#Part-III-프로세스&quot; class=&quot;headerlink&quot; title=&quot;Part III 프로세스&quot;&gt;&lt;/a&gt;Part III 프로세스&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-14-더-큰-테스트&quot;&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-III-프로세스"><a href="#Part-III-프로세스" class="headerlink" title="Part III 프로세스"></a>Part III 프로세스</h1><h2 id="CHAPTER-14-더-큰-테스트"><a href="#CHAPTER-14-더-큰-테스트" class="headerlink" title="CHAPTER 14 더 큰 테스트"></a>CHAPTER 14 더 큰 테스트</h2><p>테스트들이 자원 낭비가 아닌 값진 자산이 되게끔 하려면 또 다른 난관을 극복해야 된다</p><h3 id="더-큰-테스트란"><a href="#더-큰-테스트란" class="headerlink" title="더 큰 테스트란?"></a>더 큰 테스트란?</h3><p>더 큰 테스트의 특징</p><ul><li>느릴 수 있다</li><li>밀폐되지 않을 수 있다</li><li>비결정적일 수 있다</li></ul><h4 id="충실성"><a href="#충실성" class="headerlink" title="충실성"></a>충실성</h4><p>테스트가 대상의 실제 행위를 얼마나 충실하게 반영했는냐를 나타내는 속성</p><h4 id="단위-테스트가-손-대기-어려운-영역"><a href="#단위-테스트가-손-대기-어려운-영역" class="headerlink" title="단위 테스트가 손 대기 어려운 영역"></a>단위 테스트가 손 대기 어려운 영역</h4><ul><li>부적확한 테스트 대역</li><li>설정 문제</li><li>과부하 시 나타나는 문제</li><li>예기치 못한 동작 입력 부작용</li><li>창발적 행위와 진공 효과</li></ul><h4 id="더-큰-테스트를-만들지-않는-이유"><a href="#더-큰-테스트를-만들지-않는-이유" class="headerlink" title="더 큰 테스트를 만들지 않는 이유"></a>더 큰 테스트를 만들지 않는 이유</h4><ul><li>높은 신뢰성</li><li>빠른 속도</li><li>높은 확장성</li></ul><h3 id="더-큰-테스트-구글"><a href="#더-큰-테스트-구글" class="headerlink" title="더 큰 테스트 @ 구글"></a>더 큰 테스트 @ 구글</h3><ul><li>더 큰 테스트와 수명<ul><li>아이스크림콘 테스트 안티패턴</li></ul></li><li>구글 규모에서의 더 큰 테스트<ul><li>통합 테스트라 하더라도 가능한 작을수록 좋습니다<h3 id="큰-테스트의-구조"><a href="#큰-테스트의-구조" class="headerlink" title="큰 테스트의 구조"></a>큰 테스트의 구조</h3></li></ul></li></ul><ol><li>테스트 대상 시스템 확보</li><li>필요한 테스트 데이터 준비</li><li>대상 시스템을 이용해 동작수행</li><li>행위 검증</li></ol><ul><li>테스트 대상 시스템<ul><li>밀폐성</li><li>충실성</li><li>단일 프로세스 SUT</li><li>단일 머신 SUT</li><li>다중 머신 SUT</li><li>공유환경</li><li>하이브리드</li></ul></li><li>밀폐된 SUT의 이점<ul><li>큰 테스트에서 SUT는 테스트 신뢰성을 떨어뜨리고 피드백 시간을 늘리는 주범이 될 수 있습니다</li></ul></li><li>쿤제 경계에서 SUT 크기 줄이기<ul><li>테스트 하다 보면 웬만해서는 피해야할 고통스러운 경계가 존재함</li></ul></li><li>기록&#x2F;재생 프록시<ul><li>비결정성을 없애기 위해 매칭기를 이용하여 요청을 보고 기대하는 응답과 일치시킨다</li></ul></li><li>테스트 데이터<ul><li>시드 데이터</li><li>테스트 트래픽</li><li>도메인 데이터</li><li>현실적인 기준선</li><li>데이터 기록 API</li><li>손수 가공한 데이터</li><li>복사한 데이터</li><li>샘플링한 데이터</li></ul></li><li>검증<ul><li>수동 검증</li><li>단정문</li><li>A&#x2F;B 테스트</li></ul></li></ul><h3 id="더-큰-테스트-유형"><a href="#더-큰-테스트-유형" class="headerlink" title="더 큰 테스트 유형"></a>더 큰 테스트 유형</h3><ul><li>하나 이상의 바이너리에 대한 기능 테스트<ul><li>SUT : 밀폐된 단일 머신 혹은 격리된 클라우드 배포</li><li>데이터 : 수동 생성</li><li>검증 방식 : 단정문</li></ul></li><li>브라우저와 기기 테스트</li><li>성능, 부하, 스트레스 테스트<ul><li>SUT : 격리된 클라우드에 배포</li><li>데이터 : 수동 생성 혹은 프로덕션 환경에서 복사</li><li>검증 방식 : 차이 비교</li></ul></li><li>배포 설정 테스트<ul><li>SUT : 밀폐된 단일 머신 혹은 격리된 클라우드 배포</li><li>데이터 : 없음</li><li>검증 방식 : 단정문(비정상 종료는 하지 않음)</li><li>스모크 테스트</li></ul></li><li>탐색적 테스팅<ul><li>한계</li><li>버그 파티</li></ul></li><li>A&#x2F;B 차이(회귀) 테스트</li><li>사용자 인수 테스트</li><li>프로버와 카나리 분석</li><li>재해 복구와 카오스 엔지니어링</li><li>사용자 평가</li></ul><h3 id="큰-테스트와-개발자-워크플로"><a href="#큰-테스트와-개발자-워크플로" class="headerlink" title="큰 테스트와 개발자 워크플로"></a>큰 테스트와 개발자 워크플로</h3><ul><li>큰테스트 작성하기</li><li>큰테스트 수행하기<ul><li>테스트 속도 개선하기</li><li>불규칙한 결과에서 벗어나기</li><li>이해되는 테스트 만들기</li></ul></li><li>큰 테스트의 소유권<ul><li>반듯이 소유자가 문서로 기록되어 있어야 함</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/07/2024-07-24-Software_Engineering_at_Google_CHAPTER_14/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 13 테스트 대역</title>
      <link>https://sejoung.github.io/2024/07/2024-07-09-Software_Engineering_at_Google_CHAPTER_13/</link>
      <guid>https://sejoung.github.io/2024/07/2024-07-09-Software_Engineering_at_Google_CHAPTER_13/</guid>
      <pubDate>Tue, 09 Jul 2024 00:45:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-III-프로세스&quot;&gt;&lt;a href=&quot;#Part-III-프로세스&quot; class=&quot;headerlink&quot; title=&quot;Part III 프로세스&quot;&gt;&lt;/a&gt;Part III 프로세스&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-13-테스트-대역&quot;&gt;&lt;a
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-III-프로세스"><a href="#Part-III-프로세스" class="headerlink" title="Part III 프로세스"></a>Part III 프로세스</h1><h2 id="CHAPTER-13-테스트-대역"><a href="#CHAPTER-13-테스트-대역" class="headerlink" title="CHAPTER 13 테스트 대역"></a>CHAPTER 13 테스트 대역</h2><p>단순한 코드라면 단위 테스트 작성이 전혀 부담되지 않습니다 하지만 대상 코드가 복잡해질수록 테스트를 작성하기도 어려워진다</p><p>테스트 대역은 실제 구현 대신 사용 할 수 있는 객체나 함수를 말한다</p><h3 id="테스트-대역이-소프트웨어-개발에-미치는-영향"><a href="#테스트-대역이-소프트웨어-개발에-미치는-영향" class="headerlink" title="테스트 대역이 소프트웨어 개발에 미치는 영향"></a>테스트 대역이 소프트웨어 개발에 미치는 영향</h3><ul><li>테스트 용이성</li><li>적용 가능성</li><li>충실성</li></ul><h3 id="테스트-대역-구글"><a href="#테스트-대역-구글" class="headerlink" title="테스트 대역 @ 구글"></a>테스트 대역 @ 구글</h3><p>품질을 높은 예도 많지만 잘못 할용하여 역효과를 낸 예도 못지 않다</p><ul><li>엔지니어가 관행들에 익숙하지 않는다</li><li>코드베이스가 관행을 따르기에 적합하지 않게 작성되어 있기도 한다</li></ul><h3 id="기본-개념"><a href="#기본-개념" class="headerlink" title="기본 개념"></a>기본 개념</h3><ul><li>테스트 대역 예</li><li>이어주기<ul><li>테스트 하기 쉽다</li><li>의존성 주입</li></ul></li><li>모의 객체 프레임 워크</li></ul><h3 id="테스트-대역-활용-기법"><a href="#테스트-대역-활용-기법" class="headerlink" title="테스트 대역 활용 기법"></a>테스트 대역 활용 기법</h3><ul><li>속이기(가짜 객체)</li><li>뭉개기(스텁)</li><li>상호작용 테스트하기</li></ul><h3 id="실제-구현"><a href="#실제-구현" class="headerlink" title="실제 구현"></a>실제 구현</h3><ul><li>실제 구현을 선호하는 테스트 방식을 고전적 테스트</li><li>모의 객체 프레임워크를 선호하는 테스트 방식은 모의 객체 중심주의 테스트</li><li>갹리 보단 현실성을 우선하자</li><li>실제 구현을 사용할지 결정하기<ul><li>실행시간</li><li>결정성</li><li>의존성 생성</li></ul></li></ul><h3 id="속이기-가짜-객체"><a href="#속이기-가짜-객체" class="headerlink" title="속이기(가짜 객체)"></a>속이기(가짜 객체)</h3><ul><li>가짜 객체가 중요한 이유</li><li>가짜 객체를 작성해야 할때</li><li>가자 객체의 충실성</li><li>가짜 객체도 테스트 해야</li><li>가짜 객체를 이용할 수 없다면<h3 id="뭉개기-스텁"><a href="#뭉개기-스텁" class="headerlink" title="뭉개기(스텁)"></a>뭉개기(스텁)</h3></li><li>스텁 과용의 위험성<ul><li>불명확해진다</li><li>깨지기 쉬워진다</li><li>테스트 효과가 감소한다</li></ul></li><li>스텁이 적합한경우<ul><li>대상 시스템을 원하는 상태로 변경하려 할 때 제격</li></ul></li></ul><h3 id="상호작용-테스트하기"><a href="#상호작용-테스트하기" class="headerlink" title="상호작용 테스트하기"></a>상호작용 테스트하기</h3><ul><li>상호작용 테스트보다 상태 테스트를 우선하자<ul><li>변경 검충 테스트</li></ul></li><li>상호작용 테스트가 적합한 경우<ul><li>상태 변경 함수일 경우에만 상호작용 테스트를 우선 고려하자</li><li>너무 상세한 테스트는 피하자</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/07/2024-07-09-Software_Engineering_at_Google_CHAPTER_13/#disqus_thread</comments>
    </item>
    
    <item>
      <title>3D Gaussian Splatting</title>
      <link>https://sejoung.github.io/2024/07/2024-07-05-gaussian_splatting/</link>
      <guid>https://sejoung.github.io/2024/07/2024-07-05-gaussian_splatting/</guid>
      <pubDate>Fri, 05 Jul 2024 06:39:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;3D-Gaussian-Splatting&quot;&gt;&lt;a href=&quot;#3D-Gaussian-Splatting&quot; class=&quot;headerlink&quot; title=&quot;3D Gaussian Splatting&quot;&gt;&lt;/a&gt;3D Gaussian Splatting&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="3D-Gaussian-Splatting"><a href="#3D-Gaussian-Splatting" class="headerlink" title="3D Gaussian Splatting"></a>3D Gaussian Splatting</h1><p>colmap을 사용해서 3D reconstruction을 하고 나서 3D Gaussian Splatting을 사용해서 rendering을 할 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;location&gt;</span><br><span class="line">|---images</span><br><span class="line">|   |---&lt;image 0&gt;</span><br><span class="line">|   |---&lt;image 1&gt;</span><br><span class="line">|   |---...</span><br><span class="line">|---sparse</span><br><span class="line">    |---0</span><br><span class="line">        |---cameras.bin</span><br><span class="line">        |---images.bin</span><br><span class="line">        |---points3D.bin</span><br></pre></td></tr></table></figure><p> ㅇ –ㅎ<br>위에 폴더 구조를 따라야 된다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  File &quot;/repositories/gaussian-splatting/scene/dataset_readers.py&quot;, line 95, in readColmapCameras</span><br><span class="line">    assert False, &quot;Colmap camera model not handled: only undistorted datasets (PINHOLE or SIMPLE_PINHOLE cameras) supported!&quot;</span><br><span class="line">AssertionError: Colmap camera model not handled: only undistorted datasets (PINHOLE or SIMPLE_PINHOLE cameras) supported!</span><br></pre></td></tr></table></figure><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://github.com/graphdeco-inria/gaussian-splatting">3D Gaussian Splatting for Real-Time Radiance Field Rendering</a></li><li><a href="https://github.com/mkkellogg/GaussianSplats3D">3D Gaussian splatting for Three.js</a></li><li><a href="https://demuc.de/colmap/">COLMAP – SfM and MVS</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/07/2024-07-05-gaussian_splatting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>COLMAP 설치</title>
      <link>https://sejoung.github.io/2024/07/2024-07-03-colmap/</link>
      <guid>https://sejoung.github.io/2024/07/2024-07-03-colmap/</guid>
      <pubDate>Wed, 03 Jul 2024 00:52:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;COLMAP-설치&quot;&gt;&lt;a href=&quot;#COLMAP-설치&quot; class=&quot;headerlink&quot; title=&quot;COLMAP 설치&quot;&gt;&lt;/a&gt;COLMAP 설치&lt;/h1&gt;&lt;p&gt;COLMAP은 그래픽 및 명령줄 인터페이스가 있는 범용 구조-모션(SfM) 
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="COLMAP-설치"><a href="#COLMAP-설치" class="headerlink" title="COLMAP 설치"></a>COLMAP 설치</h1><p>COLMAP은 그래픽 및 명령줄 인터페이스가 있는 범용 구조-모션(SfM) 및 멀티-뷰 스테레오(MVS) 파이프라인입니다.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>최신 버전은 맥용으로 빌드를 해놓지 않았다 2021년 7월 3일 기준으로. 그래서 직접 빌드를 해야한다.</p><p>아래 종속성 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">brew install \</span><br><span class="line">    cmake \</span><br><span class="line">    ninja \</span><br><span class="line">    boost \</span><br><span class="line">    eigen \</span><br><span class="line">    flann \</span><br><span class="line">    freeimage \</span><br><span class="line">    metis \</span><br><span class="line">    glog \</span><br><span class="line">    googletest \</span><br><span class="line">    ceres-solver \</span><br><span class="line">    qt5 \</span><br><span class="line">    glew \</span><br><span class="line">    cgal \</span><br><span class="line">    sqlite3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/colmap/colmap.git</span><br><span class="line"><span class="built_in">cd</span> colmap</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/opt/homebrew/opt/qt@5/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..  -GNinja -DQt5_DIR=/usr/local/opt/qt/lib/cmake/Qt5</span><br><span class="line">ninja</span><br><span class="line">sudo ninja install</span><br></pre></td></tr></table></figure><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colmap gui</span><br></pre></td></tr></table></figure><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://colmap.github.io/install.html">colmap install</a></li><li><a href="https://demuc.de/colmap/">COLMAP – SfM and MVS</a></li><li><a href="https://github.com/kmss1258/Colmap-setup">Colmap-setup</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/07/2024-07-03-colmap/#disqus_thread</comments>
    </item>
    
    <item>
      <title>3D Vision 2</title>
      <link>https://sejoung.github.io/2024/06/2024-06-21-3d_vision_2/</link>
      <guid>https://sejoung.github.io/2024/06/2024-06-21-3d_vision_2/</guid>
      <pubDate>Fri, 21 Jun 2024 02:44:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;3D-Vision&quot;&gt;&lt;a href=&quot;#3D-Vision&quot; class=&quot;headerlink&quot; title=&quot;3D Vision&quot;&gt;&lt;/a&gt;3D Vision&lt;/h1&gt;&lt;h2 id=&quot;Implicit-Function-NeRF&quot;&gt;&lt;a href=&quot;#Imp
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="3D-Vision"><a href="#3D-Vision" class="headerlink" title="3D Vision"></a>3D Vision</h1><h2 id="Implicit-Function-NeRF"><a href="#Implicit-Function-NeRF" class="headerlink" title="Implicit Function: NeRF"></a>Implicit Function: NeRF</h2><ul><li>NeRF<ul><li>2020 년에 나온 논문</li><li>인풋으로 카메라 포즈를 알고 있는 픽셀들의 레이드를 알고 있어 그걸로 렌더링하는 게 목표</li><li>데이터는 신에대한 이미지</li><li>colmap sfm pipeline을 사용해서 데이터를 만들었다</li></ul></li><li>Positional Encoding<ul><li>fourfeat</li></ul></li><li>Multiscale Representation<ul><li>mipnerf</li></ul></li><li>Learned Initializations<ul><li>learnit</li></ul></li><li>Relighting<ul><li>nerv</li></ul></li><li>giraffe</li></ul><h2 id="Open3D"><a href="#Open3D" class="headerlink" title="Open3D"></a>Open3D</h2><ul><li>3D Sensors: Depth Map</li><li>Structured Light</li><li>Depth Camera (Prime Sense &amp; Kinect)</li><li>Lidar Sensor</li><li>3D Scene Datasets <ul><li>RGBD dataset</li><li>ScanNet</li><li>KITTI</li><li>CityScape Dataset</li><li>Semantic KITTI</li><li>Waymo Open Dataset</li><li>KITTI 360 Dataset</li><li>Indoor Lidar Dataset</li><li>AI Habitat ‒ HM3D</li></ul></li><li>3D Object Datasets<ul><li>ShapeNet</li><li>ABC Dataset</li><li>ABO Dataset</li><li>Google Scanned Object</li></ul></li></ul><h2 id="COLMAP-SfM-MVS"><a href="#COLMAP-SfM-MVS" class="headerlink" title="COLMAP (SfM, MVS)"></a>COLMAP (SfM, MVS)</h2><ul><li>open 3d</li><li>COLMAP<ul><li>Structure-from-Motion (SfM) and Multi-View Stereo (MVS) pipeline</li><li>COLMAP SfM<ul><li>• COLMAP’s incremental Structure-from-Motion pipeline.</li></ul></li></ul></li></ul><h2 id="3D-reconstruction"><a href="#3D-reconstruction" class="headerlink" title="3D reconstruction"></a>3D reconstruction</h2><ul><li>Images -&gt; Points: Structure from Motion</li><li>Points -&gt; More points: Multiple View Stereo</li><li>Points -&gt; Meshes: Model Fitting</li><li>Meshes -&gt; Models: Texture Mapping</li></ul><h2 id="Human-Reconstruction"><a href="#Human-Reconstruction" class="headerlink" title="Human Reconstruction"></a>Human Reconstruction</h2><ul><li>3D Human Datasets<ul><li>Renderpeople</li><li>ANIMAR 4</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.matthewtancik.com/nerf">Representing Scenes as Neural Radiance Fields for View Synthesis</a></li><li><a href="https://github.com/bmild/nerf/blob/master/tiny_nerf.ipynb">tiny_nerf.ipynb</a></li><li><a href="https://github.com/bmild/nerf">nerf</a></li><li><a href="https://bmild.github.io/fourfeat/index.html">fourfeat</a></li><li><a href="https://jonbarron.info/mipnerf/">Mip-NeRF</a></li><li><a href="https://www.matthewtancik.com/learnit">Learned Initializations for Optimizing Coordinate-Based Neural Representations</a></li><li><a href="https://pratulsrinivasan.github.io/nerv/">NeRV</a></li><li><a href="https://m-niemeyer.github.io/project-pages/giraffe/index.html">GIRAFFE</a></li><li><a href="https://cs.nyu.edu/~silberman/datasets/nyu_depth_v2.html">NYU Depth Dataset V2</a></li><li><a href="https://github.com/isl-org/Open3D">Open3D</a></li><li><a href="https://colmap.github.io/tutorial.html">colmap</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/06/2024-06-21-3d_vision_2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 12 단위 테스트</title>
      <link>https://sejoung.github.io/2024/06/2024-06-21-Software_Engineering_at_Google_CHAPTER_12/</link>
      <guid>https://sejoung.github.io/2024/06/2024-06-21-Software_Engineering_at_Google_CHAPTER_12/</guid>
      <pubDate>Fri, 21 Jun 2024 00:52:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-III-프로세스&quot;&gt;&lt;a href=&quot;#Part-III-프로세스&quot; class=&quot;headerlink&quot; title=&quot;Part III 프로세스&quot;&gt;&lt;/a&gt;Part III 프로세스&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-12-단위-테스트&quot;&gt;&lt;a
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-III-프로세스"><a href="#Part-III-프로세스" class="headerlink" title="Part III 프로세스"></a>Part III 프로세스</h1><h2 id="CHAPTER-12-단위-테스트"><a href="#CHAPTER-12-단위-테스트" class="headerlink" title="CHAPTER 12 단위 테스트"></a>CHAPTER 12 단위 테스트</h2><ul><li>작은 테스트는 빠르고 결정적이어서 개발자들이 수시로 수행하며 피드백을 즉각 얻을수 있다</li><li>단위 테스트는 대체로 대상 코드와 동시에 작성할 수 있을 만큼 작성하기 쉽다</li><li>빠르게 작성할 수 있으므로 테스트 커버리지를 높이기 좋다</li><li>시스템의 특정 부분에 집중하므로 실패 시 원인을 파악하기 쉽다</li><li>대상 시스템의 사용법과 의도한 동작 방식을 알려주는 문서자료 혹은 예제 코드 역활을 한다</li></ul><h3 id="유지보수하기-쉬워야-한다"><a href="#유지보수하기-쉬워야-한다" class="headerlink" title="유지보수하기 쉬워야 한다"></a>유지보수하기 쉬워야 한다</h3><ul><li>변경과 상관없는 변경 때문에 실패하는 깨지기 쉬운 테스트들이 도사리고 있다</li><li>무엇이 잘못되어 실패했는지 어떻게 고쳐야 하는지를 파악하기 어려운 불명확한 테스트들이다</li></ul><h3 id="깨지기-쉬운-테스트-예방하기"><a href="#깨지기-쉬운-테스트-예방하기" class="headerlink" title="깨지기 쉬운 테스트 예방하기"></a>깨지기 쉬운 테스트 예방하기</h3><p>깨지기 쉬운 테스트 란? : 실제로는 버그가 없으에도 심지어 검증 대상 코드와는 관련조차 없는 변경 때문에 실패하는 테스트를 말한다</p><ul><li>변하지 않는 테스트를 만들기 위해 노력하자<ul><li>순수 리팩터링</li><li>새로운 기능추가</li><li>버그 수정</li><li>행위 변경</li></ul></li><li>공개 API를 이용해 테스트하자</li><li>상호작용이 아닌 상태를 테스트하자</li></ul><h3 id="명확한-테스트-작성하기"><a href="#명확한-테스트-작성하기" class="headerlink" title="명확한 테스트 작성하기"></a>명확한 테스트 작성하기</h3><p>명확한 테스트라 함은 존재 이유와 실패 원인을 엔지니어가 곧바로 알아차릴 수 있는 테스트를 말한다</p><ul><li>완전하고 간결하게 만들자<ul><li>완전한 테스트 : 결과에 도달하기까지의 논리를 읽는 이가 이해하는 데 필요한 모든 정보를 본문에 담고 있는 테스트</li><li>간결한 테스트 : 관련 없는 정보는 포함하지 않는 테스트</li></ul></li><li>메서드가 아니라 행위를 테스트하자<ul><li>테스트의 구조는 행위가 부각되도록 구성</li><li>테스트 이름은 검사하는 행위에 어울리게 짓자</li></ul></li><li>테스트에 논리를 넣지 말자</li><li>실패 메시지를 명확하게 작성하자</li></ul><h3 id="테스트와-코드-공유-DRY가-아니라-DAMP"><a href="#테스트와-코드-공유-DRY가-아니라-DAMP" class="headerlink" title="테스트와 코드 공유: DRY가 아니라 DAMP!"></a>테스트와 코드 공유: DRY가 아니라 DAMP!</h3><p>대부분의 소프트웨어는 반복하지 말라는 DRY(Don’t Repeat Yourself) 원칙을 따른다</p><p>DAMP(descriptive and meaningful phrases) : 서술적이고 의미 있는 문구</p><p>DAMP가 DRY를 대체하지 않는다 보완 해주는 개념이다</p><ul><li>공유 값</li><li>공유 셋업</li><li>공유 도우미 메서드와 공유 검증 메서드</li><li>테스트 인프라 정의하기</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/06/2024-06-21-Software_Engineering_at_Google_CHAPTER_12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>3D Vision 1</title>
      <link>https://sejoung.github.io/2024/06/2024-06-17-3d_vision_1/</link>
      <guid>https://sejoung.github.io/2024/06/2024-06-17-3d_vision_1/</guid>
      <pubDate>Mon, 17 Jun 2024 05:29:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;3D-Vision&quot;&gt;&lt;a href=&quot;#3D-Vision&quot; class=&quot;headerlink&quot; title=&quot;3D Vision&quot;&gt;&lt;/a&gt;3D Vision&lt;/h1&gt;&lt;p&gt;3차원 데이터는 x,y,z 같은 좌표를 갖는다&lt;/p&gt;
&lt;h2 id=&quot;3D-R
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="3D-Vision"><a href="#3D-Vision" class="headerlink" title="3D Vision"></a>3D Vision</h1><p>3차원 데이터는 x,y,z 같은 좌표를 갖는다</p><h2 id="3D-Representations-Point-Cloud-Voxel-Mesh"><a href="#3D-Representations-Point-Cloud-Voxel-Mesh" class="headerlink" title="3D Representations: Point Cloud, Voxel, Mesh"></a>3D Representations: Point Cloud, Voxel, Mesh</h2><p>컴퓨터를 통해서 3D 데이터를 어떻게 만들어야 되나</p><p>시멘틱 vs 신텍스</p><p>Raw data</p><ul><li>Point cloud<ul><li>Unstructured</li></ul></li><li>Range image <ul><li>텝스이미지의 스캔한 이미지</li></ul></li><li>Polygon soup<ul><li>폴리곤</li></ul></li></ul><p>Surfaces</p><ul><li>Mesh<ul><li>폴리곤 삼각형으로 되어 있는것</li><li>꼭 이어져있지 않다</li></ul></li><li>Subdivision<ul><li>점점 더 작은 폴리곤으로 나누어지는것</li></ul></li><li>Parametric</li><li>Implicit</li></ul><p>Solids</p><ul><li>Voxels</li><li>BSP tree<ul><li>바이너리 트리</li></ul></li><li>CSG</li><li>Sweep</li></ul><p>High-level structures</p><ul><li>Scene graph<ul><li>리프노드의 모음</li></ul></li><li>Skeleton</li><li>Application specific</li></ul><h2 id="Point-Cloud-Classification"><a href="#Point-Cloud-Classification" class="headerlink" title="Point Cloud Classification"></a>Point Cloud Classification</h2><ul><li>point net <ul><li>Multi-Layer Perceptron (MLP)</li></ul></li><li>PointNet++<ul><li>포인트넷은 로컬 스트럭처를 캡쳐하지 못한 문제</li></ul></li><li>point transformer<ul><li>포인트넷의 문제를 해결하기 위해 제안된 모델</li><li>트렌스포머 구조를 3d에도 잘 활용한다</li></ul></li></ul><h2 id="Point-Cloud-Registration"><a href="#Point-Cloud-Registration" class="headerlink" title="Point Cloud Registration"></a>Point Cloud Registration</h2><ul><li>3D surface registration<ul><li>Gauss Newton algorithm</li><li>chain rule</li></ul></li><li>point set registration<ul><li>sparse convolution<ul><li>특정 위치에서만 컨블러션을 수행함</li></ul></li><li>u-shape network</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/06/2024-06-17-3d_vision_1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 11 테스트 개요</title>
      <link>https://sejoung.github.io/2024/06/2024-06-17-Software_Engineering_at_Google_CHAPTER_11/</link>
      <guid>https://sejoung.github.io/2024/06/2024-06-17-Software_Engineering_at_Google_CHAPTER_11/</guid>
      <pubDate>Mon, 17 Jun 2024 02:53:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-III-프로세스&quot;&gt;&lt;a href=&quot;#Part-III-프로세스&quot; class=&quot;headerlink&quot; title=&quot;Part III 프로세스&quot;&gt;&lt;/a&gt;Part III 프로세스&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-11-테스트-개요&quot;&gt;&lt;a
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-III-프로세스"><a href="#Part-III-프로세스" class="headerlink" title="Part III 프로세스"></a>Part III 프로세스</h1><h2 id="CHAPTER-11-테스트-개요"><a href="#CHAPTER-11-테스트-개요" class="headerlink" title="CHAPTER 11 테스트 개요"></a>CHAPTER 11 테스트 개요</h2><p>테스트는 처음부터 프로그래밍과 함께다</p><p>소프트웨어와 시스템 복잡도에 대응하기 위해 테스트 방식을 극적으로 진화<br>그 진화의 중심에는 개발자가 주도하는 테스트와 자동 테스트가 있다</p><p>자동 테스트는 버그가 몰래 숨어들어 고객을 놀라게 하는 사태를 막아준다</p><p>테스트 체계가 잘 갖춰져 있다면 변화를 두려워할 이유가 없다</p><p>시스템을 더 많이 더 빠르게 변경하고 싶다면 더 빠르게 테스트 하는 방법을 모색해야 한다</p><p>테스트를 작성하는 행위가 시스템 설계에도 영향을 준다</p><h3 id="테스트를-작성하는-이유"><a href="#테스트를-작성하는-이유" class="headerlink" title="테스트를 작성하는 이유"></a>테스트를 작성하는 이유</h3><ul><li>테스트 하려는 단하나의 행위</li><li>특정한 입력</li><li>관측 가능한 출력 혹은 동작</li><li>통제된 조건</li></ul><p>테스트는 엔지니어에게 신뢰를 줄때만 가치가 있다.</p><p>최고의 팀은 팀원들의 집단 지성을 팀 전체의 이익으로 환원하는 방법을 찾아내야 된다</p><p>테스트 코드가 주는 혜택</p><ul><li>디버깅 감소</li><li>자신 있게 변경</li><li>더 나은 문서자료</li><li>더 단순한 리뷰</li><li>사려 깊은 설계</li><li>고품질의 릴리스를 빠르게</li></ul><h3 id="테스트-스위트-설계하기"><a href="#테스트-스위트-설계하기" class="headerlink" title="테스트 스위트 설계하기"></a>테스트 스위트 설계하기</h3><ul><li>테스트의 크기<ul><li>작은 테스트<ul><li>제약이 가장심하다</li></ul></li><li>중간 크기의 테스트<ul><li>단 한 대의 기기에서 수행</li></ul></li><li>큰 테스트<ul><li>여러 대의 기기를 활용</li></ul></li><li>테스트 크기와 무관한 공통 습성<ul><li>테스트는 독립적이어야 한다(밀폐 되어야 한다)</li></ul></li></ul></li><li>테스트 범위<ul><li>좁은 범위 테스트</li><li>중간 범위 테스트</li><li>넓은 범위 테스트</li><li>안티 패턴<ul><li>아이스크림 콘<ul><li>종단간 테스트를 많이 작성하고 통합테스트나 단위 테스트는</li></ul></li><li>모레시계<ul><li>종단간 테스트와 단위테스트는 많지만 통합테스트가 적다</li></ul></li></ul></li><li>비욘세 규칙<ul><li>네가 좋아했다면 테스트를 준비했어야지</li></ul></li><li>코드 커버리지</li></ul></li></ul><h3 id="구글-규모의-테스트"><a href="#구글-규모의-테스트" class="headerlink" title="구글 규모의 테스트"></a>구글 규모의 테스트</h3><p>구글은 모든 코드를 모노리포로 관리</p><p>리포지토리 브랜치를 사용하는 팀은 거의 없다</p><p>테스트 비용을 낮추는데 투자하지 않으면 종국에는 엔지니어들이 테스트가 전혀 가치가 없다고 결론 낼 것이다</p><h3 id="구글의-테스트-역사"><a href="#구글의-테스트-역사" class="headerlink" title="구글의 테스트 역사"></a>구글의 테스트 역사</h3><ul><li>오리엔테이션 수업</li><li>테스트 인증</li><li>화장실에서도 테스트<ul><li>화장실 변기 않에 붙히기</li></ul></li><li>오늘날의 테스트 문화<ul><li>테스트를 강제시키면 테스트가 뿌리내리는데 오래 걸렸을것다</li><li>테스트가 훌륭한 아이디어인것을 검증하는데 집중함<h3 id="자동-테스트의-한계"><a href="#자동-테스트의-한계" class="headerlink" title="자동 테스트의 한계"></a>자동 테스트의 한계</h3>탐색적 테스팅</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/06/2024-06-17-Software_Engineering_at_Google_CHAPTER_11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 10 문서자료</title>
      <link>https://sejoung.github.io/2024/06/2024-06-14-Software_Engineering_at_Google_CHAPTER_10/</link>
      <guid>https://sejoung.github.io/2024/06/2024-06-14-Software_Engineering_at_Google_CHAPTER_10/</guid>
      <pubDate>Fri, 14 Jun 2024 07:20:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-III-프로세스&quot;&gt;&lt;a href=&quot;#Part-III-프로세스&quot; class=&quot;headerlink&quot; title=&quot;Part III 프로세스&quot;&gt;&lt;/a&gt;Part III 프로세스&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-10-문서자료&quot;&gt;&lt;a h
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-III-프로세스"><a href="#Part-III-프로세스" class="headerlink" title="Part III 프로세스"></a>Part III 프로세스</h1><h2 id="CHAPTER-10-문서자료"><a href="#CHAPTER-10-문서자료" class="headerlink" title="CHAPTER 10 문서자료"></a>CHAPTER 10 문서자료</h2><p>대부분의 엔지니어가 코드를 작성하고 이용하고 유지보수 하면서 대표적인 불만이 양질의 문서자료가 부족하다는 점</p><p>구글에서 문서 자료를 개선하고자 해본 시도 중 가장 성공적이었던 방법은 문서자료를 코드처럼 취급하여 엔지니어링 워크플로에 통합하는 것</p><h3 id="문서자료란"><a href="#문서자료란" class="headerlink" title="문서자료란?"></a>문서자료란?</h3><p>엔지니어가 작업을 끝마치기 위해 작성해야 하는 모든 부수적인 테스트를 의미</p><h3 id="문서자료가-필요한-이유"><a href="#문서자료가-필요한-이유" class="headerlink" title="문서자료가 필요한 이유"></a>문서자료가 필요한 이유</h3><p>양질의 문서 자료는 엔지니어링 조직에 커다란 축복<br>코드와 API를 이해하기 쉬워지고 실수가 줄어든다</p><p>프로젝트팀은 자신들의 설계 목표와 팀의 목표가 활자로 명확하게 적혀있을 때 역량을 더 집중하게 됩니다.</p><p>수동으로 해야 되는 일은 절차가 잘 기술되어 있어야 쉬워진다.</p><p>문서자료가 중요한데 덜중요하다고 생각되는 이유가 무엇인가?</p><ul><li>해택이 즉각적으로 돌어오지 않는다</li><li>글쓰르길 프로그래밍과는 별개의 기술로 본다</li><li>글쓰기에 자신 없어하는 엔지니어도 많다</li><li>문서자료는 도구 지원이나 개발 워크플로 통합 측면에서 아직 많이 부족하기 때문에 작성하기가 상대적으로 더 어렵다</li><li>문서자료가 기존 코드를 유지 보수하기 더 쉽게 해준다고 생각하기보다는 유지보수할 대상이 하나 더 늘어난다고 생각한다</li></ul><p>문서자료는 다양한 부류에 사람에게 혜택을 준다</p><p>작성자에도 혜택을 받는다</p><ul><li>API를 가다듭는데 도움을 준다</li><li>유지보수를 위한 로드맵과 과거 이력을 제공한다</li><li>코드를 더 전문적이고 매력있게 보이게 한다</li></ul><p>읽는이에게 최적화 하라</p><h3 id="문서자료는-코드와-같다"><a href="#문서자료는-코드와-같다" class="headerlink" title="문서자료는 코드와 같다"></a>문서자료는 코드와 같다</h3><ul><li>꼭 따라야 하는 내부 정책과 규칙이 있어야 한다</li><li>버전 관리 시스템에 등록해 관리해야 한다</li><li>관리 책임자를 명시해야 한다</li><li>변경시 리뷰를 거쳐야 한다</li><li>주기적으로 평가를 받아야 한다</li><li>가능하면 정확성이나 최신 정보 반영 여부등을 측정해야 한다</li></ul><h3 id="독자를-알라"><a href="#독자를-알라" class="headerlink" title="독자를 알라"></a>독자를 알라</h3><p>문서자료를 작성하면 법하는 가장 중요한 실수는 자신만을 위해 쓴다는것</p><p>독자 유형</p><ul><li>도메인 지식을 독자의 눈높이에 맞는 기술 수준으로 써야한다<ul><li>경험 수준 : 전문 프로그래머, 초보 엔지니어</li><li>도메인 지식 : 팀원, 혹은 다른 사내직원</li><li>목적 : 최종사용자, 소프트웨어 전문가</li></ul></li><li>탐색자 : 자신이 원하는것을 명확히 알고 있는 사람</li><li>배외자 : 무엇을 원하는지 정확하게 알지 못하는 사람</li></ul><h3 id="문서자료-유형"><a href="#문서자료-유형" class="headerlink" title="문서자료 유형"></a>문서자료 유형</h3><ul><li>참조용 문서자료<ul><li>파일 주석</li><li>클래스 주석</li><li>함수주석</li></ul></li><li>설계 문서</li><li>튜토리얼</li><li>개념 설명 문서</li><li>랜딩 페이지<h3 id="문서자료-리뷰"><a href="#문서자료-리뷰" class="headerlink" title="문서자료 리뷰"></a>문서자료 리뷰</h3></li><li>정확성 확인용 기술 리뷰</li><li>명확성 확인용 기술 리뷰</li><li>일관성 확인용 기술 리뷰</li></ul><h3 id="문서화-철학"><a href="#문서화-철학" class="headerlink" title="문서화 철학"></a>문서화 철학</h3><ul><li>누가 무엇을 어떻게 어디서 왜<ul><li>누갸 : 독자</li><li>무엇 : 문서의 목적</li><li>언제 : 생성되고 리뷰되고 갱신된 날짜</li><li>어디에 : 문서가 존재해야할 장소</li><li>왜 : 문서의 목적</li></ul></li><li>시작 중간 끝</li><li>좋은 문서자료의 특징<ul><li>완전성</li><li>정확성</li><li>명확성</li></ul></li><li>문서 폐기하기</li></ul><h3 id="테크니컬-라이터가-필요한-순간"><a href="#테크니컬-라이터가-필요한-순간" class="headerlink" title="테크니컬 라이터가 필요한 순간"></a>테크니컬 라이터가 필요한 순간</h3><p>팀원 외 독자를 위한 문서를 만들때 필요하다</p><h3 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h3><p>내가 곧 문제이자 해결책임</p><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/06/2024-06-14-Software_Engineering_at_Google_CHAPTER_10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>3부 문을 열다 / 어떻게 통찰을 촉진할 수 있는가</title>
      <link>https://sejoung.github.io/2024/06/2024-06-11-Seeing_What_Others_Dont_CHAPTER_3/</link>
      <guid>https://sejoung.github.io/2024/06/2024-06-11-Seeing_What_Others_Dont_CHAPTER_3/</guid>
      <pubDate>Tue, 11 Jun 2024 13:45:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;3부-문을-열다-x2F-어떻게-통찰을-촉진할-수-있는가&quot;&gt;&lt;a href=&quot;#3부-문을-열다-x2F-어떻게-통찰을-촉진할-수-있는가&quot; class=&quot;headerlink&quot; title=&quot;3부 문을 열다 &amp;#x2F; 어떻게 통찰을 촉진할 수 있는
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="3부-문을-열다-x2F-어떻게-통찰을-촉진할-수-있는가"><a href="#3부-문을-열다-x2F-어떻게-통찰을-촉진할-수-있는가" class="headerlink" title="3부 문을 열다 &#x2F; 어떻게 통찰을 촉진할 수 있는가"></a>3부 문을 열다 &#x2F; 어떻게 통찰을 촉진할 수 있는가</h1><p>통찰의 경로</p><ul><li>모순 경로</li><li>연결 경로</li><li>창의적 절망 경로</li></ul><h2 id="14장-우리-자신을-돕기"><a href="#14장-우리-자신을-돕기" class="headerlink" title="14장 우리 자신을 돕기"></a>14장 우리 자신을 돕기</h2><p>모순의 힘을 더 잘 사용하는 것</p><p>연결 경로는 많은 아이디어들을 빙빙 돌게 만들며 우연한 링크를 만드는데 뛰어나다<br>소용돌이와 난류가 많을수록 발견의 확률은 더 높아진다<br>아이디어 밀도를 높이고 창의적인 사람들과의 접촉을 늘리는 방법들을 찾아야 한다<br>거꾸로 사고하기의 오류에 부딪힐수도 있다</p><p>창의적 절망의 경로는 다른 태도를 요구한다</p><ul><li>비판적 사고</li></ul><p>번뜩임의 순간을 촉진하기 위한 배양은?</p><ul><li>회복을 위한 휴식</li></ul><h2 id="15장-다른-사람-돕기"><a href="#15장-다른-사람-돕기" class="headerlink" title="15장 다른 사람 돕기"></a>15장 다른 사람 돕기</h2><p>그들의 결함 있는 믿음을 바로잡는것</p><ul><li>진단</li><li>진단 더하기 행동</li><li>결함 있는 믿음을 고치기 위한 모순 사용</li><li>헛발질 하기</li></ul><h2 id="16장-우리-조직-돕기"><a href="#16장-우리-조직-돕기" class="headerlink" title="16장 우리 조직 돕기"></a>16장 우리 조직 돕기</h2><p>성과 공식의 아랫쪽 화살의 독재를 깬다</p><ul><li>위쪽 화살표 강화하기</li><li>필터 느슨하게 만들기 </li><li>조직의 의지력 늘리기<ul><li>행동으로 옮기는 의지력 부족</li><li>개인의 수준이 아닌 조직 수준에서의 자기 통찰이 필요</li></ul></li><li>권위에 호소하기<ul><li>조직의 리더들이 문화를 바꾸도록 시도하는것</li></ul></li></ul><h2 id="17장-통찰-사냥꾼이-되기-위한-팁"><a href="#17장-통찰-사냥꾼이-되기-위한-팁" class="headerlink" title="17장 통찰 사냥꾼이 되기 위한 팁"></a>17장 통찰 사냥꾼이 되기 위한 팁</h2><p>최고의 상황은 통찰이 일어나는 것을 지켜본 후에 더 많은 세부사항을 찾는 것</p><h2 id="18장-통찰의-마술"><a href="#18장-통찰의-마술" class="headerlink" title="18장 통찰의 마술"></a>18장 통찰의 마술</h2><p>통찰의 마술은 다음 힘에서 나온다 연결, 우연의 일치, 호기심을 알아채려는 힘, 모순을 감지하려는 힘. 이 마술은 우리 속에 살고 있다. 쉬지 않고 마음을 뒤흔들면서.</p><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://m.yes24.com/Goods/Detail/15850970">통찰, 평범에서 비범으로</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/06/2024-06-11-Seeing_What_Others_Dont_CHAPTER_3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2부 문을 닫다 / 무엇이 통찰을 방해하는가</title>
      <link>https://sejoung.github.io/2024/06/2024-06-11-Seeing_What_Others_Dont_CHAPTER_2/</link>
      <guid>https://sejoung.github.io/2024/06/2024-06-11-Seeing_What_Others_Dont_CHAPTER_2/</guid>
      <pubDate>Tue, 11 Jun 2024 13:14:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2부-문을-닫다-x2F-무엇이-통찰을-방해하는가&quot;&gt;&lt;a href=&quot;#2부-문을-닫다-x2F-무엇이-통찰을-방해하는가&quot; class=&quot;headerlink&quot; title=&quot;2부 문을 닫다 &amp;#x2F; 무엇이 통찰을 방해하는가&quot;&gt;&lt;/a&gt;2부 문을
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="2부-문을-닫다-x2F-무엇이-통찰을-방해하는가"><a href="#2부-문을-닫다-x2F-무엇이-통찰을-방해하는가" class="headerlink" title="2부 문을 닫다 &#x2F; 무엇이 통찰을 방해하는가"></a>2부 문을 닫다 &#x2F; 무엇이 통찰을 방해하는가</h1><h2 id="9장-어리석음"><a href="#9장-어리석음" class="headerlink" title="9장 어리석음"></a>9장 어리석음</h2><p>동일한 상황 동일한 정보가 있어도 어리석으면 통찰을 얻지 못한다.</p><p>그 생각을 못했다니 얼마나 멍청한가 - 헉슬리</p><h2 id="10장-대조적-쌍둥이-연구"><a href="#10장-대조적-쌍둥이-연구" class="headerlink" title="10장 대조적 쌍둥이 연구"></a>10장 대조적 쌍둥이 연구</h2><p>통찰을 얻지 못함</p><ul><li>결함이 있는 믿음에 빠짐</li><li>경험 부족</li><li>수동적 자세</li><li>구체적 추론 방식<ul><li>통찰에 개방적이도록 놓아 두지 않는다.</li></ul></li></ul><p>통찰을 얻음</p><ul><li>결함 있는 믿음에서 탈피함</li><li>경험 있음</li><li>적극적 자세</li><li>장난스러운 추촌 방식</li></ul><p>지식 방패 - 자신의 애초 진단이 틀렸음에도 거기에 계속 매달림</p><h2 id="11장-멍청해지는-설계"><a href="#11장-멍청해지는-설계" class="headerlink" title="11장 멍청해지는 설계"></a>11장 멍청해지는 설계</h2><p>컴퓨터 기반의 보조도구를 설계 할때 지침</p><ul><li>시스템은 사용자가 일을 더 잘하도록 도와야 한다<ul><li>일 개념을 고정시키고 통찰의 기회를 감소시킨다</li></ul></li><li>시스템은 중대한 신호를 사용자에게 분명히 보여 줘야 한다<ul><li>데이터 베이스 구조는 통찰을 얻는 데 방해가 될수 있다</li></ul></li><li>시스템은 사용자가 의미 없는 메시지 속에서 허우적 되지 않아야한다<ul><li>시스템이 새로운 중대신호를 모호하게 만들어버릴수도 있다.</li></ul></li><li>시스템은 사용자가 목표 대비 어느 정도의 진전이 있는지 모니터링 할 수 있도록 도와야 한다.<ul><li>작업을 어떻게 재구조화할지 통찰이 생겼을 때 진척도에 대한 모니터링이 우리를 방해 할 수 있다</li></ul></li></ul><p>더 강한 설계 &#x3D; 더 약한 통찰</p><h2 id="12장-조직은-어떻게-통찰을-가로막는가"><a href="#12장-조직은-어떻게-통찰을-가로막는가" class="headerlink" title="12장 조직은 어떻게 통찰을 가로막는가"></a>12장 조직은 어떻게 통찰을 가로막는가</h2><p>뜻밖의 실수가 계획과 매끄러운 운영을 엉망으로 만들수 있다</p><p>불확실성을 줄이고 실수를 최소화하겠다는 집착으로 조직들은 예측 가능성의 함정과 완벽성의 함정에 빠지게 된다</p><p>통찰은 예측 가능한 것의 반대이다</p><p>통찰은 파괴적이다</p><p>통찰은 경고없이 찾아오며 예기치 못한 형태를 띠고 상상도 못한 기회의 문을 연다</p><p>완벽성의 실수의 부재</p><p>조직이 통찰을 가로막는 방식</p><ul><li>아래쪽 화살표 시행하기</li><li>조직적 억압</li></ul><p>실수와 불확실성을 줄이는 법</p><ul><li>더욱 까다로운 기준을 부과한다</li><li>단속을 강화한다</li><li>모든 출처를 문서화 한다</li><li>가정을 뽑아낸다</li><li>이 가정들에 붕확실성 정도를 추정한다</li><li>검토 숫자를 늘린다</li><li>더 높은 엄밀성으로 결론의 정당성을 주장하게 된다</li><li>체크리스트와 절차에 의존한다</li><li>일정의 정밀도를 높여 더욱 세세하게 계획한다</li></ul><h2 id="13장-이렇게-통찰을-사냥하지-말라"><a href="#13장-이렇게-통찰을-사냥하지-말라" class="headerlink" title="13장 이렇게 통찰을 사냥하지 말라"></a>13장 이렇게 통찰을 사냥하지 말라</h2><p>패러다임이 교착상태에 빠졌을때</p><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://m.yes24.com/Goods/Detail/15850970">통찰, 평범에서 비범으로</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/06/2024-06-11-Seeing_What_Others_Dont_CHAPTER_2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>1부 통찰의 문으로 들어가다 / 통찰은 어떻게 촉발되는가</title>
      <link>https://sejoung.github.io/2024/06/2024-06-10-Seeing_What_Others_Dont_CHAPTER_1/</link>
      <guid>https://sejoung.github.io/2024/06/2024-06-10-Seeing_What_Others_Dont_CHAPTER_1/</guid>
      <pubDate>Mon, 10 Jun 2024 13:28:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;1부-통찰의-문으로-들어가다-x2F-통찰은-어떻게-촉발되는가&quot;&gt;&lt;a href=&quot;#1부-통찰의-문으로-들어가다-x2F-통찰은-어떻게-촉발되는가&quot; class=&quot;headerlink&quot; title=&quot;1부 통찰의 문으로 들어가다 &amp;#x2F; 통찰은
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="1부-통찰의-문으로-들어가다-x2F-통찰은-어떻게-촉발되는가"><a href="#1부-통찰의-문으로-들어가다-x2F-통찰은-어떻게-촉발되는가" class="headerlink" title="1부 통찰의 문으로 들어가다 &#x2F; 통찰은 어떻게 촉발되는가"></a>1부 통찰의 문으로 들어가다 &#x2F; 통찰은 어떻게 촉발되는가</h1><p>성과 개선 &#x3D; 실수를 줄이고 + 통찰을 올리는것</p><p>하지만 실수를 모두 제거해 버리면 통찰을 얻기 힘들다</p><h2 id="1장-통찰-사냥하기"><a href="#1장-통찰-사냥하기" class="headerlink" title="1장 통찰 사냥하기"></a>1장 통찰 사냥하기</h2><p>다양한 방법으로 통찰을 얻어낸다</p><h2 id="2장-번뜩임의-순간"><a href="#2장-번뜩임의-순간" class="headerlink" title="2장 번뜩임의 순간"></a>2장 번뜩임의 순간</h2><p>준비 -&gt; 배양 -&gt; 조명 -&gt; 확인</p><p>삶의 통찰을 따라다니는<br>내 매일의 아름다움이여 선율을 바꾸고<br>내 미지의 정신을 따라 길을 내네</p><p>전문성과 준비를 혼동할수도 있다.</p><p>사전에 관심사와 경험들 덕분에 다른 사람이 놓쳤던 통찰을 잡아챌 준비가 되어 있었다.</p><p>의도적 준비가 필요하다</p><p>준비는 직업윤리<br>배양은 놀이윤리에 잘 들어맞는다<br>조명단계는 무의식 속의 연상들이 이어진 결과</p><p>통찰은 되돌릴수 없다 그전에 내가 있던 지점으로 돌아갈 수 없게 된다</p><h2 id="3장-연결"><a href="#3장-연결" class="headerlink" title="3장 연결"></a>3장 연결</h2><p>점 연결하기 경험 과 더 많은 아이디어에 노출되어 문제를 해결하는 경험</p><p>오랜기간 경각심을 유지하는 것은 어려운 일<br>일상적으로 일어나는 위기 상황들은 지속적으로 산만함을 유발</p><h2 id="4장-우연의-일치와-호기심"><a href="#4장-우연의-일치와-호기심" class="headerlink" title="4장 우연의 일치와 호기심"></a>4장 우연의 일치와 호기심</h2><p>우연의 일치란 일반적으로 무시해야 할 운에 의해 일어나는 사건이지만 무시해선 안되는 경우가 있다.<br>이는 때때로 새로운 패턴에 대해 우리에게 경고를 하기도 한다.</p><p>추세를 알아채고, 패턴을 찾아내며, 불규칙성을 궁금해하며, 우연의 일치를 감지하는 사람들이야 말로 중요한 자산이다.</p><p>버넬도 펄서를 발견한 것은 우연의 일치였다.</p><h2 id="5장-모순"><a href="#5장-모순" class="headerlink" title="5장 모순"></a>5장 모순</h2><p>모순으로부터 비롯된 통찰은 그럴리 없어! 라는 감정적 반응에 불꽃을 일으킨다<br>회의적 사고</p><p>토마스 쿤 - 과학혁명의 구조</p><p>정상 과학은 모순을 짓눌러버린다 -&gt; 시간이 지나면서 이러한 불일치는 점점 커지다가 위기를 만난다 -&gt; 패러다임 시프트</p><p>아인슈타인은 일정한것을 바꿔서 패러독스를 해결함</p><h2 id="6장-창의적-절망"><a href="#6장-창의적-절망" class="headerlink" title="6장 창의적 절망"></a>6장 창의적 절망</h2><p>어떠한 통찰은 우발적이다. 계획되지 않은 우연의 결과 혹은 딱 적절한 시기와 적절한 장소에 있었다는 결과로 탄생</p><p>창의적 절망 -&gt; 시간은 자꾸흘러가고 그럴듯한 말의 이동도 소용없고, 그 어떠한 방법도 통하지 않는 절망적인 상황</p><h2 id="7장-통찰을-바라보는-다른-방법들"><a href="#7장-통찰을-바라보는-다른-방법들" class="headerlink" title="7장 통찰을 바라보는 다른 방법들"></a>7장 통찰을 바라보는 다른 방법들</h2><p>데이터를 보자 아이디어를 죽이게 되었다</p><p>통찰은 순간에도 오지만 점진적으로도 올 수 있다.</p><p>점진적 통찰</p><h2 id="8장-발견의-논리"><a href="#8장-발견의-논리" class="headerlink" title="8장 발견의 논리"></a>8장 발견의 논리</h2><p>퉁찰로 가는 모순의 경로</p><ul><li>모순 경로 </li><li>연결 경로</li><li>창의적 절망 경로</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://m.yes24.com/Goods/Detail/15850970">통찰, 평범에서 비범으로</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/06/2024-06-10-Seeing_What_Others_Dont_CHAPTER_1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 9 코드 리뷰</title>
      <link>https://sejoung.github.io/2024/06/2024-06-10-Software_Engineering_at_Google_CHAPTER_9/</link>
      <guid>https://sejoung.github.io/2024/06/2024-06-10-Software_Engineering_at_Google_CHAPTER_9/</guid>
      <pubDate>Mon, 10 Jun 2024 00:47:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-III-프로세스&quot;&gt;&lt;a href=&quot;#Part-III-프로세스&quot; class=&quot;headerlink&quot; title=&quot;Part III 프로세스&quot;&gt;&lt;/a&gt;Part III 프로세스&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-9-코드-리뷰&quot;&gt;&lt;a h
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-III-프로세스"><a href="#Part-III-프로세스" class="headerlink" title="Part III 프로세스"></a>Part III 프로세스</h1><h2 id="CHAPTER-9-코드-리뷰"><a href="#CHAPTER-9-코드-리뷰" class="headerlink" title="CHAPTER 9 코드 리뷰"></a>CHAPTER 9 코드 리뷰</h2><p>코드 리뷰는 작성자 이외에 사람이 코드를 검토하는 프로세스로 주로 코드를 코드베이스에 반영하기 전에 수행한다</p><p>코드리뷰는 버그가 코드베이스로 침투하기 전에 잡아 낸다.</p><h3 id="코드-리뷰-흐름"><a href="#코드-리뷰-흐름" class="headerlink" title="코드 리뷰 흐름"></a>코드 리뷰 흐름</h3><p>변경을 코드에 커밋하기 전에 리뷰 하는데 이 단계를 프리커밋 리뷰라고 한다</p><h3 id="코드-리뷰-구글"><a href="#코드-리뷰-구글" class="headerlink" title="코드 리뷰 @ 구글"></a>코드 리뷰 @ 구글</h3><p>구글에서 어떤 변경이든 승인을 얻으려면 세 가지 측면 리뷰를 통과해야 한다</p><ul><li>다른 엔지니어로부터 정확성과 이해 용이성을 평가 받는다</li><li>변경되는 코드영역을 관리하는 코드 소유자로 부터 변경 코드가 적절하다는 승인을 받는다</li><li>누군가로 부터 가독성 승인을 받습니다</li></ul><h3 id="코드-리뷰의-이점"><a href="#코드-리뷰의-이점" class="headerlink" title="코드 리뷰의 이점"></a>코드 리뷰의 이점</h3><ul><li>코드가 정확한지 확인<ul><li>일반적으로 변경 작성자가 선택한 방식을 존중해 준다</li><li>정확성을 검사하는 유일한 수단이 아니라서 완벽까진 필요없다</li></ul></li><li>변경된 코드를 다른 엔지니어도 잘 이해(코드 이해 용의성)<ul><li>변경을 살펴 볼수 있는 첫번째 기회</li></ul></li><li>코드 베이스가 일관됨(코드 일관성)<ul><li>너무 복잡해지면 안됨</li><li>해당 프로그래밍 언어의 모범 사례들을 잘 따라야 된다</li><li>구글 코드 리포지토리에서 같은 언어로 작성된 다른 코드와 일관성을 유지해야 한다</li><li>필요 이상 복잡하지 않아야 된다</li></ul></li><li>팀이 소유권을 더 강하게 느낍(심리적, 문화적이점)</li><li>지식이 공유</li><li>코드 리뷰 자체의 기록이 남음</li></ul><h3 id="코드-리뷰-모범-사례"><a href="#코드-리뷰-모범-사례" class="headerlink" title="코드 리뷰 모범 사례"></a>코드 리뷰 모범 사례</h3><ul><li>공손하고 전문가 답게</li><li>작게 변경하기</li><li>변경 설명 잘쓰기</li><li>리뷰어는 최소환으로</li><li>가능한 한 자동화하기</li></ul><h3 id="코드-리뷰-유형"><a href="#코드-리뷰-유형" class="headerlink" title="코드 리뷰 유형"></a>코드 리뷰 유형</h3><ul><li>그린필드 코드리뷰<ul><li>새로운 코드를 추가할 때</li></ul></li><li>동작변경 개선 최적화</li><li>버그 수정과 롤백</li><li>리팩터링과 대규모 변경</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/06/2024-06-10-Software_Engineering_at_Google_CHAPTER_9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 8 스타일 가이드와 규칙</title>
      <link>https://sejoung.github.io/2024/06/2024-06-05-Software_Engineering_at_Google_CHAPTER_8/</link>
      <guid>https://sejoung.github.io/2024/06/2024-06-05-Software_Engineering_at_Google_CHAPTER_8/</guid>
      <pubDate>Wed, 05 Jun 2024 07:32:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Part-III-프로세스&quot;&gt;&lt;a href=&quot;#Part-III-프로세스&quot; class=&quot;headerlink&quot; title=&quot;Part III 프로세스&quot;&gt;&lt;/a&gt;Part III 프로세스&lt;/h1&gt;&lt;h2 id=&quot;CHAPTER-8-스타일-가이드와-규칙
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Part-III-프로세스"><a href="#Part-III-프로세스" class="headerlink" title="Part III 프로세스"></a>Part III 프로세스</h1><h2 id="CHAPTER-8-스타일-가이드와-규칙"><a href="#CHAPTER-8-스타일-가이드와-규칙" class="headerlink" title="CHAPTER 8 스타일 가이드와 규칙"></a>CHAPTER 8 스타일 가이드와 규칙</h2><p>조직 내부 코드베이스를 관리하는 규직은 어디든 존재한다<br>규칙은 법이다.</p><p>지침은 권장사항과 모법사례를 이야기함<br>따르는 편이 이득이라 어지간하면 따르라고 권한다</p><p>코드의 지속 가능성을 높이도록 이끄는것</p><h3 id="규칙이-필요한-이유"><a href="#규칙이-필요한-이유" class="headerlink" title="규칙이 필요한 이유"></a>규칙이 필요한 이유</h3><p>좋은 행동을 장례하고 나쁜 행동을 억제하기 위함<br>조직에 따라 좋고 나쁨은 틀릴수 있다</p><h3 id="규칙-만들기"><a href="#규칙-만들기" class="headerlink" title="규칙 만들기"></a>규칙 만들기</h3><p>규칙을 만들때 어떤 규칙이 필요하지? 가 아니라 어떤 목표가 필요하지로 잡근 하는게 좋다</p><h4 id="기본-원칙"><a href="#기본-원칙" class="headerlink" title="기본 원칙"></a>기본 원칙</h4><p>규칙을 만들때 염두해 두어야 하는 일</p><ul><li>규칙의 양을 최소화 한다</li><li>코드를 읽는 사람에게 맞춘다</li><li>일관되어야 한다</li><li>오류가 나기 쉽거나 예상치 못한 동작을 유발하는 구조를 피한다</li><li>꼭 필요하다면 실용성을 생각해 예외를 허용해라</li></ul><h4 id="스타일-가이드"><a href="#스타일-가이드" class="headerlink" title="스타일 가이드"></a>스타일 가이드</h4><ul><li>위험을 피하기 위한 규칙</li><li>모법 사례를 적용하기 위한 규칙</li><li>일관성을 보장하기 위한 규칙<ul><li>무엇을 선택했냐 보다 선택했다는 사실에 의의를 둠</li></ul></li></ul><h3 id="규칙-수정하기"><a href="#규칙-수정하기" class="headerlink" title="규칙 수정하기"></a>규칙 수정하기</h3><p>엔지니어들이 규칙을 우회하는데 애를 쓰고 있으면 그 규칙에 기대했던 트레이드오프를 재검토해야됨</p><h4 id="프로세스"><a href="#프로세스" class="headerlink" title="프로세스"></a>프로세스</h4><p>스타일 가이드 수정 프로세스는 해법을 중심으로 돌아간다<br>문제가 주어지면 현시점에서는 다른 결론에 도달할 수 있는지를 다시평가</p><h4 id="스타일-중재자"><a href="#스타일-중재자" class="headerlink" title="스타일 중재자"></a>스타일 중재자</h4><p>구글의 스타일 가이드들은 언어별로 소유자가 따로 있어서 최종 결정과 승인을 책임진다.</p><h4 id="예외"><a href="#예외" class="headerlink" title="예외"></a>예외</h4><p>스타일 가이드의 규칙은 법과 같지만 일부 규칙은 예외를 허용한다.<br>규칙을 따르기보다 예외를 인정하는 쪽이 이득이라고 판단될 때만 예외를 허용</p><h3 id="지침"><a href="#지침" class="headerlink" title="지침"></a>지침</h3><p>지침에는 복잡한 주제에 관한 길고 깊은 논의부터 권장하는 모범사례에 관한 짧고 집중적인 조언까지 다양하다</p><h3 id="규칙-적용하기"><a href="#규칙-적용하기" class="headerlink" title="규칙 적용하기"></a>규칙 적용하기</h3><p>규칙을 정해도 적용하지 않으면 의미가 없다</p><p>규칙을 강제하는 방법으로는 교육과 훈련을 통한 사회적인 방법과 도구를 이용한 기술적인 방법이 있다</p><ul><li>오류 검사기</li><li>코드 포멧터</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/109182479">구글 엔지니어는 이렇게 일한다</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/06/2024-06-05-Software_Engineering_at_Google_CHAPTER_8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>3 애자일</title>
      <link>https://sejoung.github.io/2024/06/2024-06-02-growing_up_together_CHAPTER_3/</link>
      <guid>https://sejoung.github.io/2024/06/2024-06-02-growing_up_together_CHAPTER_3/</guid>
      <pubDate>Sun, 02 Jun 2024 12:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;3-애자일&quot;&gt;&lt;a href=&quot;#3-애자일&quot; class=&quot;headerlink&quot; title=&quot;3 애자일&quot;&gt;&lt;/a&gt;3 애자일&lt;/h1&gt;&lt;p&gt;애자일은 불확실성이 높은 프로젝트에 더 적합하다&lt;/p&gt;
&lt;p&gt;협력과 학습이 애자일이 불확실성을 다루는 핵
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="3-애자일"><a href="#3-애자일" class="headerlink" title="3 애자일"></a>3 애자일</h1><p>애자일은 불확실성이 높은 프로젝트에 더 적합하다</p><p>협력과 학습이 애자일이 불확실성을 다루는 핵심적인 구동원리</p><h2 id="애자일의-씨앗"><a href="#애자일의-씨앗" class="headerlink" title="애자일의 씨앗"></a>애자일의 씨앗</h2><p>고객에게 매일 가치를 전하라</p><p>가치를 전하면 협력이 쉽다</p><h2 id="애자일-도입-성공-요인-분석"><a href="#애자일-도입-성공-요인-분석" class="headerlink" title="애자일 도입 성공 요인 분석"></a>애자일 도입 성공 요인 분석</h2><p>고객참여와 코드 공유</p><p>두려워도 중요하다면 시도해봐야 되지 않겠는가</p><p>성숙도가 낮다면 고객참여는 필수</p><p>성공하는 조직에는 항상 뛰어난 애자일 코치가 존재</p><h2 id="당신의-조직에-새-방법론이-먹히지-않는-이유"><a href="#당신의-조직에-새-방법론이-먹히지-않는-이유" class="headerlink" title="당신의 조직에 새 방법론이 먹히지 않는 이유"></a>당신의 조직에 새 방법론이 먹히지 않는 이유</h2><p>우리는 말할수 있는것보다 더많이 알고 있다</p><p>복잡한 분야일수록 어떤 특정 기법의 효과보다도 치료자 효과가 더 큰 영향을 미침</p><p>우리가 어떤 방법론을 쓰느냐는 문제보다도 누가 참여했는가가 훨씬 더 압도적으로 중요한 문제</p><h2 id="애자일을-애자일스럽게-도입하기"><a href="#애자일을-애자일스럽게-도입하기" class="headerlink" title="애자일을 애자일스럽게 도입하기"></a>애자일을 애자일스럽게 도입하기</h2><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/67350256">함께 자라기</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/06/2024-06-02-growing_up_together_CHAPTER_3/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
