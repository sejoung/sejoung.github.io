<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>폭간의 기술블로그</title>
    <link>https://sejoung.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>잘정리하자</description>
    <pubDate>Mon, 19 Feb 2024 06:19:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Deep Learning-2</title>
      <link>https://sejoung.github.io/2024/02/2024-02-19-deep_learning_2/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-19-deep_learning_2/</guid>
      <pubDate>Mon, 19 Feb 2024 02:32:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Deep-Learning-2&quot;&gt;&lt;a href=&quot;#Deep-Learning-2&quot; class=&quot;headerlink&quot; title=&quot;Deep Learning 2&quot;&gt;&lt;/a&gt;Deep Learning 2&lt;/h1&gt;&lt;h2 id=&quot;Beyond-ResNet
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Deep-Learning-2"><a href="#Deep-Learning-2" class="headerlink" title="Deep Learning 2"></a>Deep Learning 2</h1><h2 id="Beyond-ResNet"><a href="#Beyond-ResNet" class="headerlink" title="Beyond ResNet"></a>Beyond ResNet</h2><h3 id="DenseNet-Add-Dense-Connection"><a href="#DenseNet-Add-Dense-Connection" class="headerlink" title="DenseNet : Add Dense Connection"></a>DenseNet : Add Dense Connection</h3><ul><li>ResNet의 단점을 보완하기 위해 제안된 방법</li><li>ResNet은 입력과 출력을 더하는 방식으로 연결을 만들었지만, DenseNet은 입력과 출력을 Concatenation하는 방식으로 연결을 만듬</li></ul><h3 id="SENet-Squeeze-and-Excitation-module"><a href="#SENet-Squeeze-and-Excitation-module" class="headerlink" title="SENet : Squeeze and Excitation module"></a>SENet : Squeeze and Excitation module</h3><ul><li>각 채널의 중요도를 학습하여 채널의 중요도에 따라 가중치를 부여하는 방법</li></ul><h3 id="EfficientNet-Network-Depth-Network-Width-Input-Resolution-search"><a href="#EfficientNet-Network-Depth-Network-Width-Input-Resolution-search" class="headerlink" title="EfficientNet : Network Depth, Network Width, Input Resolution search."></a>EfficientNet : Network Depth, Network Width, Input Resolution search.</h3><ul><li>baseline에 스케일업을 한다</li><li>compound scaling을 통해 네트워크의 깊이, 너비, 입력 해상도를 조정하여 성능을 높임</li></ul><h2 id="Efficient-CNN"><a href="#Efficient-CNN" class="headerlink" title="Efficient CNN"></a>Efficient CNN</h2><ul><li>smail model을 만들어서 성능을 높이는 방법</li><li>best cnn 은 가장 정확한 cnn이 아니다</li><li>mobile net<ul><li>depthwise separable convolution</li></ul></li><li>shuffle net<ul><li>group convolution</li><li>channel shuffle</li></ul></li></ul><h2 id="Vision-Transformer"><a href="#Vision-Transformer" class="headerlink" title="Vision Transformer"></a>Vision Transformer</h2><ul><li>Attention을 이용하여 CNN을 대체하는 방법</li><li>soft-and-hard attention<ul><li>soft attention : 0~1을 이용하여 weighted sum</li><li>hard attention : 0~1을 이용하여 하나의 feature를 선택</li></ul></li><li>self-attention<ul><li>key, query, value를 이용하여 attention을 계산</li></ul></li><li>multi-head attention<ul><li>여러개의 attention을 이용하여 attention을 계산</li></ul></li><li>cross-attention<ul><li>다른 feature map을 이용하여 attention을 계산</li></ul></li><li>stand-alone self attention<ul><li>지역적인 정보를 이용하여 attention을 계산</li></ul></li></ul><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><ul><li>encoder-decoder 구조</li><li>self-attention을 이용하여 input을 처리</li><li>positional encoding을 이용하여 input의 위치 정보를 추가</li></ul><h2 id="Vision-Transformer-ViT"><a href="#Vision-Transformer-ViT" class="headerlink" title="Vision Transformer(ViT)"></a>Vision Transformer(ViT)</h2><ul><li>image를 patch로 나누어서 input으로 사용</li><li>masked self-attention을 이용하여 input을 처리</li><li>base model</li><li>large model</li><li>huge model</li></ul><h2 id="Swin-Transformer"><a href="#Swin-Transformer" class="headerlink" title="Swin Transformer"></a>Swin Transformer</h2><ul><li>shift window를 이용하여 input을 처리</li><li>local attention을 이용하여 input을 처리</li><li>W-MSA<ul><li>window based multi-head self-attention(local attention)</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://arxiv.org/pdf/1409.0473.pdf">NEURAL MACHINE TRANSLATION BY JOINTLY LEARNING TO ALIGN AND TRANSLATE</a></li><li><a href="https://arxiv.org/pdf/1502.03044.pdf">Show, Attend and Tell: Neural Image Caption Generation with Visual Attention</a></li><li><a href="https://www.youtube.com/watch?v=mMa2PmYJlCo">Visual Guide to Transformer Neural Networks - (Episode 2) Multi-Head &amp; Self-Attention</a></li><li><a href="https://arxiv.org/pdf/1906.05909.pdf">Stand-Alone Self-Attention in Vision Models</a></li><li><a href="https://towardsdatascience.com/master-positional-encoding-part-i-63c05d90a0c3">Master Positional Encoding: Part I</a></li><li><a href="https://arxiv.org/pdf/2010.11929.pdf">AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-19-deep_learning_2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AnimateDiff: Stable Diffusion for Animation Generation with ComfyUI</title>
      <link>https://sejoung.github.io/2024/02/2024-02-19-comfyui_animatediff/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-19-comfyui_animatediff/</guid>
      <pubDate>Mon, 19 Feb 2024 01:38:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;AnimateDiff-Stable-Diffusion-for-Animation-Generation-with-ComfyUI&quot;&gt;&lt;a href=&quot;#AnimateDiff-Stable-Diffusion-for-Animation-Generation-
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="AnimateDiff-Stable-Diffusion-for-Animation-Generation-with-ComfyUI"><a href="#AnimateDiff-Stable-Diffusion-for-Animation-Generation-with-ComfyUI" class="headerlink" title="AnimateDiff: Stable Diffusion for Animation Generation with ComfyUI"></a>AnimateDiff: Stable Diffusion for Animation Generation with ComfyUI</h1><p>지금 까지 comfyui에 AnimateDiff를 사용하여 애니메이션을 생성하는 플러그인은 2개 정도 인데<br><a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved">Kosinkadink&#x2F;ComfyUI-AnimateDiff-Evolved</a> 플러그인은<br>img2img를 사용하여 애니메이션을 생성하지 못한다 그래서 <a href="https://github.com/ArtVentureX/comfyui-animatediff">ArtVentureX&#x2F;comfyui-animatediff</a> 플러그인을 사용하여 애니메이션을 생성하였다.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>먼저 comfyui 플러그인을 설치한다. 설치 방법은 comfyui manager를 설치하면 쉽게 다운로드 할수 있다 </p><p>수동 설치를 원한다면 comfyui에 <code>custom_nodes</code> 폴더에 직접 다운로드 하면 된다</p><p>설치가 완료 되면 필수 모델을 다운로드 해야 된다 custom_nodes 폴더에 <code>comfyui-animatediff/models/</code> 폴더에 다운로드 하면 된다.</p><p><a href="https://huggingface.co/guoyww/animatediff">guoyww&#x2F;animatediff</a></p><h2 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h2><p><a href="https://github.com/ArtVentureX/comfyui-animatediff/blob/main/README.md">comfyui-animatediff README</a> 파일에 잘 나와있다</p><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://github.com/ArtVentureX/comfyui-animatediff">ArtVentureX&#x2F;comfyui-animatediff</a></li><li><a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved">Kosinkadink&#x2F;ComfyUI-AnimateDiff-Evolved</a></li><li><a href="https://huggingface.co/guoyww/animatediff">guoyww&#x2F;animatediff</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-19-comfyui_animatediff/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 17 타임라인 조율하기</title>
      <link>https://sejoung.github.io/2024/02/2024-02-19-Grokking_Simplicity_17/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-19-Grokking_Simplicity_17/</guid>
      <pubDate>Mon, 19 Feb 2024 00:50:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-17-타임라인-조율하기&quot;&gt;&lt;a href=&quot;#CHAPTER-17-타임라인-조율하기&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 17 타임라인 조율하기&quot;&gt;&lt;/a&gt;CHAPTER 17 타임라인 조율하기&lt;/h1&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-17-타임라인-조율하기"><a href="#CHAPTER-17-타임라인-조율하기" class="headerlink" title="CHAPTER 17 타임라인 조율하기"></a>CHAPTER 17 타임라인 조율하기</h1><h2 id="타임라인을-나누기-위한-동시성-기본형"><a href="#타임라인을-나누기-위한-동시성-기본형" class="headerlink" title="타임라인을 나누기 위한 동시성 기본형"></a>타임라인을 나누기 위한 동시성 기본형</h2><p>경쟁조건(race condition)은 어떤 동작이 먼저 끝나는 타임라인에 의존할 때 발생합니다</p><h2 id="코드에-Cut-적용하기"><a href="#코드에-Cut-적용하기" class="headerlink" title="코드에 Cut() 적용하기"></a>코드에 Cut() 적용하기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cut</span>(<span class="params">num, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> num_finished = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    num_finished += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(num_finished === num)</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> done = <span class="title class_">Cut</span>(<span class="number">3</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3 timelines are finished&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="title function_">done</span>();</span><br><span class="line"><span class="title function_">done</span>();</span><br><span class="line"><span class="title function_">done</span>();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calc_cart_total</span>(<span class="params">cart, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> done = <span class="title class_">Cut</span>(<span class="number">2</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(total);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">cost_ajax</span>(cart, <span class="keyword">function</span>(<span class="params">cost</span>) &#123;</span><br><span class="line">    total += cost;</span><br><span class="line">    <span class="title function_">done</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">shipping_ajax</span>(cart, <span class="keyword">function</span>(<span class="params">shipping</span>) &#123;</span><br><span class="line">    total += shipping;</span><br><span class="line">    <span class="title function_">done</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="딱-한-번만-호출하는-기본형"><a href="#딱-한-번만-호출하는-기본형" class="headerlink" title="딱 한 번만 호출하는 기본형"></a>딱 한 번만 호출하는 기본형</h2><p>최초 한 번만 효과가 발생하는 액션을 멱등원(idempotent)이라고 합니다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendAddToCartText</span>(<span class="params">number</span>) &#123;</span><br><span class="line">  <span class="title function_">sendTextAjax</span>(number, <span class="string">&quot;Thanks for adding something to your cart. Reply if you have any questions!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">JustOnce</span>(<span class="params">action</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> alreadyCalled = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(alreadyCalled) <span class="keyword">return</span>;</span><br><span class="line">    alreadyCalled = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">action</span>(a, b, c);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sendAddToCartTextOnce = <span class="title class_">JustOnce</span>(sendAddToCartText);</span><br><span class="line"></span><br><span class="line"><span class="title function_">sendAddToCartTextOnce</span>(<span class="string">&quot;555-555-5555-55&quot;</span>);</span><br><span class="line"><span class="title function_">sendAddToCartTextOnce</span>(<span class="string">&quot;555-555-5555-55&quot;</span>);</span><br><span class="line"><span class="title function_">sendAddToCartTextOnce</span>(<span class="string">&quot;555-555-5555-55&quot;</span>);</span><br><span class="line"><span class="title function_">sendAddToCartTextOnce</span>(<span class="string">&quot;555-555-5555-55&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="요약-타임라인-사용하기"><a href="#요약-타임라인-사용하기" class="headerlink" title="요약: 타임라인 사용하기"></a>요약: 타임라인 사용하기</h2><ul><li>타임라인 수를 줄입니다</li><li>타임라인 길이를 줄입니다</li><li>공유 자원을 업앱니다</li><li>동시성 기본형으로 자원을 공유한다</li><li>동시성 기본형으로 조율한다</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-19-Grokking_Simplicity_17/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 16 타임라인 사이에 자원 공유하기</title>
      <link>https://sejoung.github.io/2024/02/2024-02-16-Grokking_Simplicity_16/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-16-Grokking_Simplicity_16/</guid>
      <pubDate>Fri, 16 Feb 2024 01:59:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-16-타임라인-사이에-자원-공유하기&quot;&gt;&lt;a href=&quot;#CHAPTER-16-타임라인-사이에-자원-공유하기&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 16 타임라인 사이에 자원 공유하기&quot;&gt;&lt;/a&gt;CHAPT
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-16-타임라인-사이에-자원-공유하기"><a href="#CHAPTER-16-타임라인-사이에-자원-공유하기" class="headerlink" title="CHAPTER 16 타임라인 사이에 자원 공유하기"></a>CHAPTER 16 타임라인 사이에 자원 공유하기</h1><h2 id="좋은-타임라인의-원칙"><a href="#좋은-타임라인의-원칙" class="headerlink" title="좋은 타임라인의 원칙"></a>좋은 타임라인의 원칙</h2><ul><li>타임라인은 적을수록 이해하기 쉽다</li><li>타임라인은 짧을수록 이해하기 쉽다</li><li>공유하는 자원이 적을수록 이해하기 쉽다</li><li>자원을 공유한다면 서로 조율해야 한다</li><li>시간을 일급으로 다룬다</li></ul><h2 id="자바스크립트에서-큐-만들기"><a href="#자바스크립트에서-큐-만들기" class="headerlink" title="자바스크립트에서 큐 만들기"></a>자바스크립트에서 큐 만들기</h2><ul><li>큐는 자료 구조지만 타임라인 조율에 사용한다면 동시성 기본형(concurrency primitive)이 라고 부른다<ul><li>동시성 기본형은 자원을 안전하게 공유할 수 있는 재사용 가능한 코드</li></ul></li><li>핸들러에서 처리할것과 큐에서 처리할 작업 나누기</li></ul><h2 id="큐를-건너뛰도록-만들기"><a href="#큐를-건너뛰도록-만들기" class="headerlink" title="큐를 건너뛰도록 만들기"></a>큐를 건너뛰도록 만들기</h2><ul><li>최대 저장 갯수를 1개로 만들어서 최종 작업만 저장 되도록 만든다</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-16-Grokking_Simplicity_16/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Deep Learning-1</title>
      <link>https://sejoung.github.io/2024/02/2024-02-15-deep_learning_1/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-15-deep_learning_1/</guid>
      <pubDate>Thu, 15 Feb 2024 02:11:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Deep-Learning-1&quot;&gt;&lt;a href=&quot;#Deep-Learning-1&quot; class=&quot;headerlink&quot; title=&quot;Deep Learning 1&quot;&gt;&lt;/a&gt;Deep Learning 1&lt;/h1&gt;&lt;h2 id=&quot;Perceptron-ML
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Deep-Learning-1"><a href="#Deep-Learning-1" class="headerlink" title="Deep Learning 1"></a>Deep Learning 1</h1><h2 id="Perceptron-MLP"><a href="#Perceptron-MLP" class="headerlink" title="Perceptron, MLP"></a>Perceptron, MLP</h2><ul><li><p>인공신경망의 기초 단위</p></li><li><p>activation function을 통해 입력값을 출력값으로 변환</p><ul><li>binary threshold function</li><li>sigmoid function</li><li>rectified linear unit (ReLU)</li></ul></li><li><p>loss 값을 최소화하는 방향으로 가중치를 조정(학습)</p><ul><li>경사하강법(Gradient Descent)<ul><li>로스를 가중치로 미분하면 0이 되는 지점을 찾아야 하는데, 이때 미분값이 0이 되는 지점을 찾는 것이 어려움. 이를 해결하기 위해 경사하강법을 사용함</li></ul></li><li>역전파(Backpropagation)</li></ul></li><li><p>momentum</p><ul><li>경사하강법의 단점을 보완하기 위해 사용</li><li>로컬 미니멈에 빠지는 것을 방지하기 위해 관성을 사용</li><li>관성을 사용하면 로컬 미니멈에 빠지지 않고 전역 미니멈으로 수렴할 수 있음</li></ul></li></ul><h2 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h2><ul><li>Convolutional Neural Network</li><li>이미지 인식에 주로 사용</li></ul><h2 id="Overfitting-Network-Initialization"><a href="#Overfitting-Network-Initialization" class="headerlink" title="Overfitting, Network Initialization"></a>Overfitting, Network Initialization</h2><ul><li>Overfitting<ul><li>학습 데이터에만 잘 맞는 모델을 만드는 것</li><li>학습 데이터에만 잘 맞는 모델은 실제 데이터에 대해 잘 맞지 않을 수 있음</li><li>해결 방법<ul><li>early stopping <ul><li>training loss와 validation loss를 비교하여 validation loss가 증가하기 시작하면 학습을 중단</li></ul></li><li>드롭아웃(Dropout)</li></ul></li></ul></li><li>Network Weight Initialization<ul><li>가중치 초기화</li><li>가중치 초기화를 잘못하면 학습이 잘 되지 않을 수 있음</li><li>Xavier initialization</li><li>He initialization</li></ul></li><li>Learning Rate<ul><li>학습률</li><li>학습률을 잘못 설정하면 학습이 잘 되지 않을 수 있음</li><li>학습률을 잘 설정하면 학습이 빠르게 되고, 학습률을 잘못 설정하면 학습이 느리게 되거나 학습이 잘 되지 않을 수 있음</li></ul></li></ul><h2 id="AlexNet-LeNet-VGG"><a href="#AlexNet-LeNet-VGG" class="headerlink" title="AlexNet, LeNet, VGG"></a>AlexNet, LeNet, VGG</h2><p>AlexNet -&gt; ZFNet -&gt; VGGNet  -&gt; GoogLeNet -&gt; ResNet -&gt; DenseNet -&gt; SENet</p><h3 id="LeNet-5"><a href="#LeNet-5" class="headerlink" title="LeNet-5"></a>LeNet-5</h3><ul><li>1998년에 발표된 최초의 CNN</li><li>Conv -&gt; polling -&gt; Conv -&gt; polling -&gt; FC -&gt; FC</li></ul><h3 id="VGG"><a href="#VGG" class="headerlink" title="VGG"></a>VGG</h3><ul><li>하드웨어에 옵티마이저 잘되어 있다</li></ul><h2 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h2><ul><li>ReLu activation</li><li>Batch Normalization<ul><li>Optimization Landscape를 좋게 만들어 줌</li></ul></li><li>skip connection<ul><li>gradient vanishing 문제를 해결하기 위해 사용</li><li>입력값을 출력값에 더해주는 방법</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://github.com/ashutosh1919/explainable-cnn">Explainable CNNs</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-15-deep_learning_1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 15 타임라인 격리하기</title>
      <link>https://sejoung.github.io/2024/02/2024-02-15-Grokking_Simplicity_15/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-15-Grokking_Simplicity_15/</guid>
      <pubDate>Thu, 15 Feb 2024 00:46:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-15-타임라인-격리하기&quot;&gt;&lt;a href=&quot;#CHAPTER-15-타임라인-격리하기&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 15 타임라인 격리하기&quot;&gt;&lt;/a&gt;CHAPTER 15 타임라인 격리하기&lt;/h1&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-15-타임라인-격리하기"><a href="#CHAPTER-15-타임라인-격리하기" class="headerlink" title="CHAPTER 15 타임라인 격리하기"></a>CHAPTER 15 타임라인 격리하기</h1><h2 id="타임라인-다이어그램은-시간에-따라-어떤-일이-일어나는지-보여줍니다"><a href="#타임라인-다이어그램은-시간에-따라-어떤-일이-일어나는지-보여줍니다" class="headerlink" title="타임라인 다이어그램은 시간에 따라 어떤 일이 일어나는지 보여줍니다"></a>타임라인 다이어그램은 시간에 따라 어떤 일이 일어나는지 보여줍니다</h2><h2 id="두-가지-타임라인-다이어그램-기본-규칙"><a href="#두-가지-타임라인-다이어그램-기본-규칙" class="headerlink" title="두 가지 타임라인 다이어그램 기본 규칙"></a>두 가지 타임라인 다이어그램 기본 규칙</h2><ul><li>두 액션이 순서대로 나타나면 같은 타임라인에 넣는다</li><li>두 액션이 동시에 실행되거나 순서를 예상할 수 없다면 분리된 타임라인에 넣는다<ul><li>액션은 순서대로 실행되거나 동시에 실행된다</li><li>순서대로 실행되는 액션은 같은 타임라인에서 하나가 끝나면 다른 하나가 실행된다</li><li>동시에 실행되는 액션은 여러 타임라인에 나란히 실행된다</li></ul></li></ul><h2 id="자세히-보면-놓칠-수-있는-액션-순서에-관한-두-가지-사실"><a href="#자세히-보면-놓칠-수-있는-액션-순서에-관한-두-가지-사실" class="headerlink" title="자세히 보면 놓칠 수 있는 액션 순서에 관한 두 가지 사실"></a>자세히 보면 놓칠 수 있는 액션 순서에 관한 두 가지 사실</h2><ul><li>++와 +&#x3D;는 사실 세 단계다<ul><li>이 연산자에는 세 단계로 연산을 한다는 사실이 숨어 있다</li></ul></li><li>인자는 함수를 부르기 전에 실행한다<ul><li>함수에 인자를 실행하면 인자는 함수에 전달되기 전에 실행된다</li></ul></li></ul><h2 id="서로-다른-언어-서로-다른-스레드-모델"><a href="#서로-다른-언어-서로-다른-스레드-모델" class="headerlink" title="서로 다른 언어, 서로 다른 스레드 모델"></a>서로 다른 언어, 서로 다른 스레드 모델</h2><ul><li>단일 스레드, 동기<ul><li>PHP 는 기본적으로 멀티스레드를 사용할 수 없습니다</li></ul></li><li>단일 스레드, 비동기<ul><li>자바스크립트</li></ul></li><li>멀티스레드<ul><li>자바, 루비, c, c#, 파이썬</li></ul></li><li>메시지 패싱(messaging passing) 프로세스<ul><li>엘릭서, 얼랭</li></ul></li></ul><h2 id="타임라인-다이어그램으로-순서대로-실행되는-코드에도-두-가지-종류가-있다는-것을-알-수-있습니다"><a href="#타임라인-다이어그램으로-순서대로-실행되는-코드에도-두-가지-종류가-있다는-것을-알-수-있습니다" class="headerlink" title="타임라인 다이어그램으로 순서대로 실행되는 코드에도 두 가지 종류가 있다는 것을 알 수 있습니다"></a>타임라인 다이어그램으로 순서대로 실행되는 코드에도 두 가지 종류가 있다는 것을 알 수 있습니다</h2><ul><li>순서가 섞일 수 있는 코드</li><li>순서가 섞이지 않는 코드</li></ul><h2 id="타임라인-다이어그램으로-동시에-실행되는-코드는-순서를-예측할-수-없다는-것을-알-수-있습니다"><a href="#타임라인-다이어그램으로-동시에-실행되는-코드는-순서를-예측할-수-없다는-것을-알-수-있습니다" class="headerlink" title="타임라인 다이어그램으로 동시에 실행되는 코드는 순서를 예측할 수 없다는 것을 알 수 있습니다"></a>타임라인 다이어그램으로 동시에 실행되는 코드는 순서를 예측할 수 없다는 것을 알 수 있습니다</h2><ul><li>여러 개의 타임라인은 시간에 따라 다양한 방식으로 실행 될 수 있다</li><li>타임라인이 실행 가능한 방법을 가능한 순서(possible order)라고 한다</li><li>타임라인이 하나면 실행 가능한 순서는 하나다<h2 id="좋은-타임라인의-원칙"><a href="#좋은-타임라인의-원칙" class="headerlink" title="좋은 타임라인의 원칙"></a>좋은 타임라인의 원칙</h2></li><li>타임라인은 적을수록 이해하기 쉽다</li><li>타임라인은 짧을수록 이해하기 쉽다</li><li>공유하는 자원이 적을수록 이해하기 쉽다</li><li>자원을 공유한다면 서로 조율해야 한다</li><li>시간을 일급으로 다룬다</li></ul><h2 id="자바스크립트의-비동기-큐"><a href="#자바스크립트의-비동기-큐" class="headerlink" title="자바스크립트의 비동기 큐"></a>자바스크립트의 비동기 큐</h2><ul><li>자바 스크립트는 작업 큐(job queue)라고 하는 큐를 가지고 있다</li><li>이벤트 루프에 의해 처리된다</li></ul><h3 id="작업이란-무엇인가"><a href="#작업이란-무엇인가" class="headerlink" title="작업이란 무엇인가?"></a>작업이란 무엇인가?</h3><ul><li>작업 큐에 있는 작업은 이벤트 데이터와 이벤트를 처리할 콜백으로 구성되어 있다</li><li>이벤트 루프는 이벤트 데이터를 인자로 콜백을 부른다</li><li>콜백은 이벤트 루프가 실행할 함수</li><li>이벤트 루프는 단순히 첫번째 인자에 이벤트 데이터를 넣어 콜백함수를 수행한다</li></ul><h3 id="작업은-큐에-어떻게-들어가나요"><a href="#작업은-큐에-어떻게-들어가나요" class="headerlink" title="작업은 큐에 어떻게 들어가나요?"></a>작업은 큐에 어떻게 들어가나요?</h3><ul><li>이벤트가 발행하면 큐에 작업이 추가된다</li><li>이벤트는 예측 불가능한(unpredictably) 시점에 작업 큐에 들어간다</li></ul><h3 id="작업이-없을-때-엔진은-무엇을-하나"><a href="#작업이-없을-때-엔진은-무엇을-하나" class="headerlink" title="작업이 없을 때 엔진은 무엇을 하나?"></a>작업이 없을 때 엔진은 무엇을 하나?</h3><ul><li>이벤트 루프는 대기 상태로 들어가고 전원을 아낀다</li><li>가비지 컬렉션 같은 관리 작업을 한다</li></ul><h2 id="자원을-공유하는-타임라인은-문제가-생길-수-있습니다"><a href="#자원을-공유하는-타임라인은-문제가-생길-수-있습니다" class="headerlink" title="자원을 공유하는 타임라인은 문제가 생길 수 있습니다"></a>자원을 공유하는 타임라인은 문제가 생길 수 있습니다</h2><ul><li>공유하는 자원을 없에 문제를 해결할 수 있습니다</li><li>전역변수를 지역변수로 바꾸기 </li><li>전역변수를 인자로 바꾸기 <ul><li>암묵적 인자 확인하기</li><li>암묵적 입력을 인자로 바꾸기</li></ul></li></ul><h2 id="원칙-비동기-호출에서-명시적인-출력을-위해-리턴값-대신-콜백을-사용할-수-있습니다"><a href="#원칙-비동기-호출에서-명시적인-출력을-위해-리턴값-대신-콜백을-사용할-수-있습니다" class="headerlink" title="원칙: 비동기 호출에서 명시적인 출력을 위해 리턴값 대신 콜백을 사용할 수 있습니다"></a>원칙: 비동기 호출에서 명시적인 출력을 위해 리턴값 대신 콜백을 사용할 수 있습니다</h2><ul><li>동기 함수<ul><li>호출하는 곳에서 리턴값을 사용할 수 있다</li><li>액션을 빼내기 위해 액션을 부르는 곳은 리턴값으로 바꾸고 액션에 리턴값을 인자로 전달한다</li></ul></li><li>비동기 함수<ul><li>미래에 어떤 시점에 콜백을 통해 결과를 받는다</li><li>액션을 빼내기 위해 액션을 부르는 곳은 콜백으로 바꾸고 액션에 콜백을 인자로 전달한다</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-15-Grokking_Simplicity_15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>고전적인 컴퓨터 비전</title>
      <link>https://sejoung.github.io/2024/02/2024-02-14-classical_computer_vision/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-14-classical_computer_vision/</guid>
      <pubDate>Wed, 14 Feb 2024 01:51:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Classical-Computer-Vision&quot;&gt;&lt;a href=&quot;#Classical-Computer-Vision&quot; class=&quot;headerlink&quot; title=&quot;Classical Computer Vision&quot;&gt;&lt;/a&gt;Classical C
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Classical-Computer-Vision"><a href="#Classical-Computer-Vision" class="headerlink" title="Classical Computer Vision"></a>Classical Computer Vision</h1><h2 id="Local-Image-Features"><a href="#Local-Image-Features" class="headerlink" title="Local Image Features"></a>Local Image Features</h2><ul><li>Image Feature<ul><li>이미지를 수치적 값의 관점에서 추출한 정보</li></ul></li></ul><p>좋은 로컬 피처란?(interest point)</p><ul><li>saliency<ul><li>눈에 띄는 정도가 높을수록 좋은 피처</li></ul></li><li>Locality<ul><li>이미지의 작은 부분에 대한 특징을 잘 나타내는 피처</li></ul></li><li>Repeatability<ul><li>변환이 되어도 같은 성질이 뽑혀야된다</li></ul></li></ul><h2 id="합성곱-Convolution"><a href="#합성곱-Convolution" class="headerlink" title="합성곱 (Convolution)"></a>합성곱 (Convolution)</h2><ul><li>교환법칙 성립</li><li>결합법칙 성립</li><li>분배법칙 성립</li></ul><p>가우시안 필터(Gaussian Filter)</p><ul><li>이미지를 부드럽게 만들어주는 필터</li></ul><p>그라디던트 필터(Gradient Filter)</p><ul><li>이미지의 경계를 찾아주는 필터</li></ul><p>padding</p><ul><li>zero padding</li><li>warp padding</li><li>clamp padding</li><li>mirror padding</li></ul><h2 id="edge-and-corner"><a href="#edge-and-corner" class="headerlink" title="edge and corner"></a>edge and corner</h2><ul><li>edge<ul><li>이미지의 경계를 찾아주는 피처</li><li>smoothing -&gt; gradient -&gt; non-maximum suppression -&gt; hysteresis thresholding</li></ul></li><li>corner<ul><li>이미지의 모서리를 찾아주는 피처</li><li>edge detection -&gt; corner detection</li><li>edge 들이 만나는 부분</li><li>harris corner detection<ul><li>이미지의 픽셀들이 변화하는 정도를 계산하여 모서리를 찾아내는 방법</li></ul></li></ul></li></ul><h2 id="blob"><a href="#blob" class="headerlink" title="blob"></a>blob</h2><ul><li>이미지의 리전인데 주변보다 밝거나 더 어두운 영역에 대해서 Blob이라고 한다</li><li>laplacian of gaussian<ul><li>이미지를 블러처리한 후 라플라시안 필터를 적용하여 Blob을 찾아내는 방법</li></ul></li><li>difference of gaussian<ul><li>이미지를 다양한 크기로 블러처리한 후 차이를 계산하여 Blob을 찾아내는 방법</li></ul></li></ul><h2 id="Scale-Invariant-Feature-Transform-SIFT"><a href="#Scale-Invariant-Feature-Transform-SIFT" class="headerlink" title="Scale Invariant Feature Transform (SIFT)"></a>Scale Invariant Feature Transform (SIFT)</h2><ul><li>이미지의 크기에 상관없이 특징을 추출하는 알고리즘</li><li>keypoint detection -&gt; keypoint description -&gt; keypoint matching</li><li>keypoint detection</li><li>keypoint description</li></ul><h2 id="model-fitting"><a href="#model-fitting" class="headerlink" title="model fitting"></a>model fitting</h2><ul><li>fitting problem<ul><li>image stitching</li><li>3d object recognition</li></ul></li><li>Least Square Method<ul><li>weighted least square</li><li>least square</li></ul></li><li>RANSAC(Random Sample Consensus)</li><li>Hough Transform</li></ul><h2 id="feature-matching"><a href="#feature-matching" class="headerlink" title="feature matching"></a>feature matching</h2><ul><li>global feature matching</li><li>nearest neighbor matching</li></ul><h2 id="visual-recognition"><a href="#visual-recognition" class="headerlink" title="visual recognition"></a>visual recognition</h2><ul><li>classification</li><li>object detection</li><li>segmentation</li><li>scene recognition</li><li>pedestrian detection<ul><li>보행자 검출</li></ul></li></ul><h2 id="image-representation"><a href="#image-representation" class="headerlink" title="image representation"></a>image representation</h2><ul><li>bag of words<ul><li>independent feature(codeword)</li><li>histogram representation</li></ul></li><li>spatial pyramid matching<ul><li>이미지를 여러개의 영역으로 나누어서 히스토그램을 만들어서 이미지를 표현하는 방법</li></ul></li></ul><h2 id="classification"><a href="#classification" class="headerlink" title="classification"></a>classification</h2><p>분류 문제를 해결하는 방법</p><ul><li><p>linear classifier</p></li><li><p>non-linear classifier</p></li><li><p>generative model</p></li><li><p>discriminative model</p></li><li><p>discriminative function model</p></li><li><p>k-nearest neighbor</p></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="http://places2.csail.mit.edu/index.html">place2</a></li><li><a href="https://image-net.org/challenges/LSVRC/">ImageNet Large Scale Visual Recognition Challenge (ILSVRC)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-14-classical_computer_vision/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 14 중첩된 데이터에 함수형 도구 사용하기</title>
      <link>https://sejoung.github.io/2024/02/2024-02-14-Grokking_Simplicity_14/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-14-Grokking_Simplicity_14/</guid>
      <pubDate>Wed, 14 Feb 2024 00:48:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-14-중첩된-데이터에-함수형-도구-사용하기&quot;&gt;&lt;a href=&quot;#CHAPTER-14-중첩된-데이터에-함수형-도구-사용하기&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 14 중첩된 데이터에 함수형 도구 사용하
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-14-중첩된-데이터에-함수형-도구-사용하기"><a href="#CHAPTER-14-중첩된-데이터에-함수형-도구-사용하기" class="headerlink" title="CHAPTER 14 중첩된 데이터에 함수형 도구 사용하기"></a>CHAPTER 14 중첩된 데이터에 함수형 도구 사용하기</h1><h2 id="함수형-도구-update"><a href="#함수형-도구-update" class="headerlink" title="함수형 도구: update()"></a>함수형 도구: update()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">object, key, modify</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = object[key];</span><br><span class="line">  <span class="keyword">var</span> newValue = <span class="title function_">modify</span>(value);</span><br><span class="line">  <span class="keyword">var</span> newObject = <span class="title function_">objectSet</span>(object, key, newValue);</span><br><span class="line">  <span class="keyword">return</span> newObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">withObjectCopy</span>(<span class="params">object, modify</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> copy = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, object);</span><br><span class="line">    <span class="title function_">modify</span>(copy);</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">objectSet</span>(<span class="params">object, key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">withObjectCopy</span>(object, <span class="keyword">function</span>(<span class="params">copy</span>) &#123;</span><br><span class="line">        copy[key] = value;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>객체를 다루는 함수형 도구</p><h2 id="update2-도출하기"><a href="#update2-도출하기" class="headerlink" title="update2() 도출하기"></a>update2() 도출하기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">update2</span>(<span class="params">object, key1, key2, modify</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">update</span>(object, key1, <span class="keyword">function</span>(<span class="params">subObject</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">update</span>(subObject, key2, modify);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="incrementSizeByName-을-만드는-네-가지-방법"><a href="#incrementSizeByName-을-만드는-네-가지-방법" class="headerlink" title="incrementSizeByName()을 만드는 네 가지 방법"></a>incrementSizeByName()을 만드는 네 가지 방법</h2><h3 id="옵션1-update-와-incrementSize-로-만들기"><a href="#옵션1-update-와-incrementSize-로-만들기" class="headerlink" title="옵션1: update()와 incrementSize()로 만들기"></a>옵션1: update()와 incrementSize()로 만들기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">incrementSizeByName</span>(<span class="params">cart, name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">update</span>(cart, name, incrementSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">incrementSize</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> size = item[<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line">    <span class="keyword">var</span> newSize = size + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> newItem = <span class="title function_">objectSet</span>(item, <span class="string">&#x27;size&#x27;</span>, newSize);</span><br><span class="line">    <span class="keyword">return</span> newItem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="옵션2-update-와-update2-로-만들기"><a href="#옵션2-update-와-update2-로-만들기" class="headerlink" title="옵션2: update()와 update2()로 만들기"></a>옵션2: update()와 update2()로 만들기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">incrementSizeByName</span>(<span class="params">cart, name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">update</span>(cart, name, <span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">update2</span>(item, <span class="string">&#x27;options&#x27;</span>, <span class="string">&#x27;size&#x27;</span>, <span class="keyword">function</span> (<span class="params">size</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> size + <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="옵션3-update-로-만들기"><a href="#옵션3-update-로-만들기" class="headerlink" title="옵션3: update()로 만들기"></a>옵션3: update()로 만들기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">incrementSizeByName</span>(<span class="params">cart, name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">update</span>(cart, name, <span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">update</span>(item, <span class="string">&#x27;options&#x27;</span>, <span class="keyword">function</span>(<span class="params">options</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">update</span>(options, <span class="string">&#x27;size&#x27;</span>, <span class="keyword">function</span>(<span class="params">size</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> size + <span class="number">1</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="옵션4-조회하고-바꾸고-설정하는-것을-직접만들기"><a href="#옵션4-조회하고-바꾸고-설정하는-것을-직접만들기" class="headerlink" title="옵션4: 조회하고 바꾸고 설정하는 것을 직접만들기"></a>옵션4: 조회하고 바꾸고 설정하는 것을 직접만들기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">incrementSizeByName</span>(<span class="params">cart, name</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> item       = cart[name];</span><br><span class="line">  <span class="keyword">var</span> options    = item.<span class="property">options</span>;</span><br><span class="line">  <span class="keyword">var</span> size       = options.<span class="property">size</span>;</span><br><span class="line">  <span class="keyword">var</span> newSize    = size + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> newOptions = <span class="title function_">objectSet</span>(options, <span class="string">&#x27;size&#x27;</span>, newSize);</span><br><span class="line">  <span class="keyword">var</span> newItem    = <span class="title function_">objectSet</span>(item, <span class="string">&#x27;options&#x27;</span>, newOptions);</span><br><span class="line">  <span class="keyword">var</span> newCart    = <span class="title function_">objectSet</span>(cart, name, newItem);</span><br><span class="line">  <span class="keyword">return</span> newCart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="update3-도출하기"><a href="#update3-도출하기" class="headerlink" title="update3() 도출하기"></a>update3() 도출하기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">update3</span>(<span class="params">object, key1, key2, key3, modify</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">update</span>(object, key1, <span class="keyword">function</span>(<span class="params">object2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">update2</span>(object2, key2, key3, modify);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="nestedUpdate-도출하기"><a href="#nestedUpdate-도출하기" class="headerlink" title="nestedUpdate() 도출하기"></a>nestedUpdate() 도출하기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">nestedUpdate</span>(<span class="params">object, keys, modify</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(keys.<span class="property">length</span> === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">modify</span>(object);</span><br><span class="line">  <span class="keyword">var</span> key1 = keys[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> restOfKeys = <span class="title function_">drop_first</span>(keys);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">update</span>(object, key1, <span class="keyword">function</span>(<span class="params">value1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">nestedUpdate</span>(value1, restOfKeys, modify);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="안전한-재귀-사용법"><a href="#안전한-재귀-사용법" class="headerlink" title="안전한 재귀 사용법"></a>안전한 재귀 사용법</h2><ul><li>종료조건<ul><li>재귀를 멈추려면 종료 조건(base case)이 필요하다.</li></ul></li><li>재귀 호출<ul><li>재귀 호출을 하려면 자신을 호출하는 코드가 필요하다.</li></ul></li><li>종료 조건에 다가가기<ul><li>최소 하나 이상의 인자가 점점 줄어들어야 한다</li></ul></li></ul><h2 id="재귀-함수가-적합한-이유"><a href="#재귀-함수가-적합한-이유" class="headerlink" title="재귀 함수가 적합한 이유"></a>재귀 함수가 적합한 이유</h2><p>재귀나 호출 스택을 사용하지 않고 중첩된 데이터를 다루기는 어렵다</p><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-14-Grokking_Simplicity_14/#disqus_thread</comments>
    </item>
    
    <item>
      <title>컴퓨터 비전 이것만 알고 가자</title>
      <link>https://sejoung.github.io/2024/02/2024-02-13-cv-preliminary/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-13-cv-preliminary/</guid>
      <pubDate>Tue, 13 Feb 2024 04:36:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Computer-Vision&quot;&gt;&lt;a href=&quot;#Computer-Vision&quot; class=&quot;headerlink&quot; title=&quot;Computer Vision&quot;&gt;&lt;/a&gt;Computer Vision&lt;/h1&gt;&lt;h2 id=&quot;선형대수학-Linear-
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Computer-Vision"><a href="#Computer-Vision" class="headerlink" title="Computer Vision"></a>Computer Vision</h1><h2 id="선형대수학-Linear-algebra"><a href="#선형대수학-Linear-algebra" class="headerlink" title="선형대수학(Linear algebra)"></a>선형대수학(Linear algebra)</h2><p>Image description(Vector) + Decision Making(Function) &#x3D; Image Understanding</p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>크기와 방향을 가진 기학적 오브젝트</p><ul><li>연산(Operations)<ul><li>내적(inner product)</li><li>외적(outer product)</li></ul></li><li>백터의 길이(Norm)<br>* </li><li>Linear Dependency<ul><li>선형 종속<ul><li>벡터가 다른 벡터의 선형 조합으로 표현될 수 있는 경우</li></ul></li><li>선형 독립<ul><li>벡터가 다른 벡터의 선형 조합으로 표현될 수 없는 경우(직교)</li></ul></li></ul></li><li>기저(Basis)<ul><li>unit vectors(stardard basis)</li><li>orthonormal(직각) basis</li></ul></li></ul><h2 id="행렬-Matrix"><a href="#행렬-Matrix" class="headerlink" title="행렬(Matrix)"></a>행렬(Matrix)</h2><p>숫자들의 직사각형 배열</p><ul><li>연산(Oprations)<ul><li>덧셈<ul><li>교환법칙</li><li>결합법칙</li></ul></li><li>뺄셈</li><li>곱셈<ul><li>분배법칙</li><li>교환법칙</li></ul></li></ul></li><li>Rank<ul><li>행렬의 열들로 생성될 수 있는 벡터 공간의 차원</li><li>non-singular matrix<ul><li>행렬식이 0이 아닌 행렬</li></ul></li><li>singular matrix<ul><li>행렬식이 0인 행렬</li></ul></li></ul></li><li>행렬식(Determinant)</li><li>역행렬(Inverse Matrix)<ul><li>non-singular matrix만 존재</li></ul></li></ul><h2 id="고유값-분해-Eigen-Decomposition"><a href="#고유값-분해-Eigen-Decomposition" class="headerlink" title="고유값 분해(Eigen Decomposition)"></a>고유값 분해(Eigen Decomposition)</h2><h2 id="확률-probability"><a href="#확률-probability" class="headerlink" title="확률(probability)"></a>확률(probability)</h2><ul><li><p>불확실성이 높을때 확률 모델이 제일 좋다.</p></li><li><p>sample space</p><ul><li>모든 가능한 결과들의 집합</li></ul></li><li><p>event space</p><ul><li>sample space의 부분집합</li></ul></li><li><p>확률 변수(random variable)</p><ul><li>sample space에서 실수로 매핑되는 함수</li></ul></li><li><p>조건부 확률(conditional probability)</p></li><li><p>bayes’ theorem</p></li><li><p>gaussian distribution</p><ul><li>정규분포</li><li>평균과 분산으로 정의</li><li>중심극한정리<ul><li>독립적인 확률 변수들의 평균은 정규분포를 따른다.</li></ul></li></ul></li></ul><h2 id="파이썬-라이브러리"><a href="#파이썬-라이브러리" class="headerlink" title="파이썬 라이브러리"></a>파이썬 라이브러리</h2><ul><li>이미지 라이브러리<ul><li>openCV</li><li>PIL(python image library)</li><li>scikit-image<ul><li>numpy 기반</li></ul></li></ul></li><li>matplotlib<ul><li>시각화 라이브러리</li></ul></li><li>pytorch<ul><li>딥러닝 라이브러리</li><li>tensor<ul><li>array와 비슷하지만 GPU에서 동작</li></ul></li></ul></li><li>torchvision<ul><li>이미지 데이터셋, 모델 아키텍처, 이미지 변환 등을 포함한 컴퓨터 비전 라이브러리</li></ul></li><li>albumentations<ul><li>이미지 변환 라이브러리</li><li>데이터 증강</li></ul></li><li>wandb<ul><li>모델 훈련과 실험 추적을 위한 라이브러리</li></ul></li><li>kornia<ul><li>영상 처리 라이브러리</li><li>pytorch 기반</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.math.uwaterloo.ca/~hwolkowi/matrixcookbook.pdf">The Matrix Cookbook</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-13-cv-preliminary/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 13 함수형 도구 체이닝</title>
      <link>https://sejoung.github.io/2024/02/2024-02-13-Grokking_Simplicity_13/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-13-Grokking_Simplicity_13/</guid>
      <pubDate>Tue, 13 Feb 2024 00:35:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-13-함수형-도구-체이닝&quot;&gt;&lt;a href=&quot;#CHAPTER-13-함수형-도구-체이닝&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 13 함수형 도구 체이닝&quot;&gt;&lt;/a&gt;CHAPTER 13 함수형 도구 체이닝&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-13-함수형-도구-체이닝"><a href="#CHAPTER-13-함수형-도구-체이닝" class="headerlink" title="CHAPTER 13 함수형 도구 체이닝"></a>CHAPTER 13 함수형 도구 체이닝</h1><p>여러 단계를 하나로 조합하는것을 체이닝(chaining)이라고 합니다.</p><h2 id="체인을-명확하게-만들기-1-단계에-이름-붙이기"><a href="#체인을-명확하게-만들기-1-단계에-이름-붙이기" class="headerlink" title="체인을 명확하게 만들기 1: 단계에 이름 붙이기"></a>체인을 명확하게 만들기 1: 단계에 이름 붙이기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">biggestPurchasesBestCustomers</span>(<span class="params">customers</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> bestCustomers    = <span class="title function_">selectBestCustomers</span>(customers);</span><br><span class="line">  <span class="keyword">var</span> biggestPurchases = <span class="title function_">getBiggestPurchases</span>(bestCustomers);</span><br><span class="line">  <span class="keyword">return</span> biggestPurchases;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectBestCustomers</span>(<span class="params">customers</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">filter</span>(customers, <span class="keyword">function</span>(<span class="params">customer</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> customer.<span class="property">purchases</span>.<span class="property">length</span> &gt;= <span class="number">3</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBiggestPurchases</span>(<span class="params">customers</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">map</span>(customers, getBiggestPurchase);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="체인을-명확하게-만들기-2-콜백에-이름-붙이기"><a href="#체인을-명확하게-만들기-2-콜백에-이름-붙이기" class="headerlink" title="체인을 명확하게 만들기 2: 콜백에 이름 붙이기"></a>체인을 명확하게 만들기 2: 콜백에 이름 붙이기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">biggestPurchasesBestCustomers</span>(<span class="params">customers</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> bestCustomers    = <span class="title function_">filter</span>(customers, isGoodCustomer);</span><br><span class="line">  <span class="keyword">var</span> biggestPurchases = <span class="title function_">map</span>(bestCustomers, getBiggestPurchase);</span><br><span class="line">  <span class="keyword">return</span> biggestPurchases;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isGoodCustomer</span>(<span class="params">customer</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> customer.<span class="property">purchases</span>.<span class="property">length</span> &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBiggestPurchase</span>(<span class="params">customer</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">maxKey</span>(customer.<span class="property">purchases</span>, &#123;<span class="attr">total</span>: <span class="number">0</span>&#125;, getPurchaseTotal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="체인을-명확하게-만들기-3-두-방법을-비교"><a href="#체인을-명확하게-만들기-3-두-방법을-비교" class="headerlink" title="체인을 명확하게 만들기 3: 두 방법을 비교"></a>체인을 명확하게 만들기 3: 두 방법을 비교</h2><p>일반적으로는 콜백에 이름 붙이기가 더 명확하다</p><h2 id="반복문을-함수형-도구로-리팩터링하기"><a href="#반복문을-함수형-도구로-리팩터링하기" class="headerlink" title="반복문을 함수형 도구로 리팩터링하기"></a>반복문을 함수형 도구로 리팩터링하기</h2><p>지금 하는 것은 최적화이다 병목이 생겼을 때만 최적화를 하자</p><ul><li>이해하고 다시 만들기</li><li>단서를 찾아 리팩터링</li></ul><h3 id="값-하나에-map-두번-사용"><a href="#값-하나에-map-두번-사용" class="headerlink" title="값 하나에 map() 두번 사용"></a>값 하나에 map() 두번 사용</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> names = <span class="title function_">map</span>(customers, getFullName);</span><br><span class="line"><span class="keyword">var</span> nameLengths = <span class="title function_">map</span>(names, stringLength);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameLengths = <span class="title function_">map</span>(customers, <span class="keyword">function</span>(<span class="params">customer</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">stringLength</span>(<span class="title function_">getFullName</span>(customer));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="값-하나에-filter-두번-사용"><a href="#값-하나에-filter-두번-사용" class="headerlink" title="값 하나에 filter() 두번 사용"></a>값 하나에 filter() 두번 사용</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> goodCustomers = <span class="title function_">filter</span>(customers, isGoodCustomer);</span><br><span class="line"><span class="keyword">var</span> withAddresses = <span class="title function_">filter</span>(goodCustomers, hasAddress);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> withAddresses = <span class="title function_">filter</span>(customers, <span class="keyword">function</span>(<span class="params">customer</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">isGoodCustomer</span>(customer) &amp;&amp; <span class="title function_">hasAddress</span>(customer);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="map-다음에-reduce-사용하기"><a href="#map-다음에-reduce-사용하기" class="headerlink" title="map() 다음에 reduce() 사용하기"></a>map() 다음에 reduce() 사용하기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> purchaseTotals = <span class="title function_">map</span>(purchases, getPurchaseTotal);</span><br><span class="line"><span class="keyword">var</span> purchaseSum = <span class="title function_">reduce</span>(purchaseTotals, <span class="number">0</span>, plus);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> purchaseSum = <span class="title function_">reduce</span>(purchases, <span class="number">0</span>, <span class="keyword">function</span>(<span class="params">total, purchase</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> total + <span class="title function_">getPurchaseTotal</span>(purchase);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="팁-1-데이터-만들기"><a href="#팁-1-데이터-만들기" class="headerlink" title="팁 1: 데이터 만들기"></a>팁 1: 데이터 만들기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> answer = [];</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> w = <span class="number">0</span>; w &lt; <span class="variable language_">window</span>; w++) &#123;</span><br><span class="line">    <span class="keyword">var</span> idx = i + w;</span><br><span class="line">    <span class="keyword">if</span>(idx &lt; array.<span class="property">length</span>) &#123;</span><br><span class="line">      sum += array[idx];</span><br><span class="line">      count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  answer.<span class="title function_">push</span>(sum/count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> answer = [];</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> subarray = array.<span class="title function_">slice</span>(i, i + <span class="variable language_">window</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> w = <span class="number">0</span>; w &lt; subarray.<span class="property">length</span>; w++) &#123;</span><br><span class="line">    sum += subarray[w];</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  answer.<span class="title function_">push</span>(sum/count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="팁-2-한-번에-전체-배열을-조작하기"><a href="#팁-2-한-번에-전체-배열을-조작하기" class="headerlink" title="팁 2: 한 번에 전체 배열을 조작하기"></a>팁 2: 한 번에 전체 배열을 조작하기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> answer = [];</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> subarray = array.<span class="title function_">slice</span>(i, i + <span class="variable language_">window</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> w = <span class="number">0</span>; w &lt; subarray.<span class="property">length</span>; w++) &#123;</span><br><span class="line">    sum += subarray[w];</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  answer.<span class="title function_">push</span>(sum/count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> answer = [];</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> subarray = array.<span class="title function_">slice</span>(i, i + <span class="variable language_">window</span>);</span><br><span class="line">  answer.<span class="title function_">push</span>(<span class="title function_">average</span>(subarray));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="팁-3-작은-단계로-나누기"><a href="#팁-3-작은-단계로-나누기" class="headerlink" title="팁 3: 작은 단계로 나누기"></a>팁 3: 작은 단계로 나누기</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> answer = [];</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> subarray = array.<span class="title function_">slice</span>(i, i + <span class="variable language_">window</span>);</span><br><span class="line">  answer.<span class="title function_">push</span>(<span class="title function_">average</span>(subarray));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> indices = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++)</span><br><span class="line">  indices.<span class="title function_">push</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> answer = <span class="title function_">map</span>(indices, <span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> subarray = array.<span class="title function_">slice</span>(i, i + <span class="variable language_">window</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">average</span>(subarray);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="체이닝-팁-요약"><a href="#체이닝-팁-요약" class="headerlink" title="체이닝 팁 요약"></a>체이닝 팁 요약</h2><ul><li>데이터 만들기</li><li>배열 전체를 다루기</li><li>작은 단계로 나누기</li><li>조건문을 filter()로 바꾸기</li><li>유용한 함수로 추출하기<h2 id="체이닝-디버깅을-위한-팁"><a href="#체이닝-디버깅을-위한-팁" class="headerlink" title="체이닝 디버깅을 위한 팁"></a>체이닝 디버깅을 위한 팁</h2></li><li>구체적인 것을 유지하기</li><li>출력해보기</li><li>타입을 따라가 보기<h2 id="다양한-함수형-도구"><a href="#다양한-함수형-도구" class="headerlink" title="다양한 함수형 도구"></a>다양한 함수형 도구</h2></li><li>pluck()</li><li>cancat()</li><li>frequenciesBy(), groupBy()</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-13-Grokking_Simplicity_13/#disqus_thread</comments>
    </item>
    
    <item>
      <title>합성곱(Convolution)</title>
      <link>https://sejoung.github.io/2024/02/2024-02-07-convolution/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-07-convolution/</guid>
      <pubDate>Wed, 07 Feb 2024 04:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;합성곱-Convolution&quot;&gt;&lt;a href=&quot;#합성곱-Convolution&quot; class=&quot;headerlink&quot; title=&quot;합성곱(Convolution)&quot;&gt;&lt;/a&gt;합성곱(Convolution)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;grayscale 
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="합성곱-Convolution"><a href="#합성곱-Convolution" class="headerlink" title="합성곱(Convolution)"></a>합성곱(Convolution)</h1><ul><li>grayscale 0~255 사이의 값을 가지는 이미지를 사용한다.</li><li>RGB 이미지는 channel이 3개</li><li>필터 연산 : 이미지에 필터를 적용하는 연산 방법</li><li>필터 : 3x3, 5x5, 7x7 등의 크기를 가지는 행렬</li><li>연산 : weighted sum</li></ul><p>이미지 정보를 나열하면 지역적 특성이 사라져서 정보를 잃어버릴 수 있다.<br>Convolution을 사용하면 지역적 특성을 유지하면서 정보를 추출할 수 있다.</p><h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2><p>그냥 합성곱 연산을 하면 이미지의 크기가 줄어들게 된다. 이를 방지하기 위해 패딩을 사용한다.(주로 0으로 채움 zero padding)</p><h2 id="Stride"><a href="#Stride" class="headerlink" title="Stride"></a>Stride</h2><p>합성곱 연산을 할 때 필터를 몇 칸씩 이동할지를 결정하는 값 최종 데이터가 줄어든다</p><h2 id="필터"><a href="#필터" class="headerlink" title="필터"></a>필터</h2><ul><li>feature map : 필터를 적용한 결과</li><li>channel : 필터의 개수</li></ul><h2 id="Max-Pooling"><a href="#Max-Pooling" class="headerlink" title="Max Pooling"></a>Max Pooling</h2><ul><li>feature map에서 가장 큰수만 남기고 없애는 연산</li><li>파라미터수 감소 시키기 위해 사용</li></ul><h2 id="Fully-Connected-Layer"><a href="#Fully-Connected-Layer" class="headerlink" title="Fully Connected Layer"></a>Fully Connected Layer</h2><ul><li>fully connected layer : 모든 뉴런이 연결되어 있는 층</li><li>노드 갯수가 class의 갯수</li></ul><h2 id="기울기-소실-gradient-vanishing"><a href="#기울기-소실-gradient-vanishing" class="headerlink" title="기울기 소실(gradient vanishing)"></a>기울기 소실(gradient vanishing)</h2><ul><li>학습이 진행될수록 gradient가 점점 작아져서 학습이 잘 되지 않는 문제</li><li>ReLU를 사용하여 해결</li><li>ReLU : 0보다 작은 값은 0으로, 0보다 큰 값은 그대로 출력하는 함수</li><li>skip connection : 입력값을 출력값에 더해주는 방법</li></ul><h2 id="YOLO-You-Only-Look-Once"><a href="#YOLO-You-Only-Look-Once" class="headerlink" title="YOLO(You Only Look Once)"></a>YOLO(You Only Look Once)</h2><ul><li>one stage object detection</li><li>이미지를 그리드로 나누고 각 그리드에 대해 bounding box와 class를 예측하는 방법</li></ul><h2 id="YOLO-DeepSort"><a href="#YOLO-DeepSort" class="headerlink" title="YOLO + DeepSort"></a>YOLO + DeepSort</h2><ul><li>YOLO로 객체를 인식하고 DeepSort로 객체를 추적하는 방법</li><li>DeepSort : id switch, occlusion, missing detection 문제를 해결하기 위해 사용</li><li>Deep: deep association metric learning</li><li>SORT : Simple Online and Realtime Tracking<ul><li>Kalman filter를 사용하여 객체를 추적하는 방법</li><li>hungarian algorithm을 사용하여 객체를 매칭하는 방법</li></ul></li></ul><h2 id="U-Net"><a href="#U-Net" class="headerlink" title="U-Net"></a>U-Net</h2><ul><li>이미지 분할을 위한 네트워크</li><li>왼쪽 부분은 이미지를 줄이는 부분(contracting path, downsampling path)</li><li>오른쪽 부분은 이미지를 복원하는 부분(expansive path, upsampling path)</li><li>skip connection을 사용하여 이미지의 지역적 특성을 유지하면서 이미지를 복원한다.</li></ul><h2 id="pre-processing"><a href="#pre-processing" class="headerlink" title="pre-processing"></a>pre-processing</h2><ul><li>resize : 이미지의 크기를 줄이거나 늘리는 작업(이미지의 크기를 통일시키기 위해 사용) resoultion이 다르면 학습이 잘 되지 않을 수 있다.</li><li>color : 이미지의 색상을 변경하는 작업</li><li>normalization : 이미지의 픽셀값을 0~1사이의 값으로 변경하는 작업, min-max scaling</li></ul><h2 id="클래스-불균형-class-imbalance"><a href="#클래스-불균형-class-imbalance" class="headerlink" title="클래스 불균형(class imbalance)"></a>클래스 불균형(class imbalance)</h2><ul><li><p>클래스 간의 데이터의 갯수가 차이가 나는 경우</p></li><li><p>다양성이 작을 경우</p></li><li><p>over-sampling : 데이터의 갯수를 늘리는 방법(중복추출로 양을 늘림) 다양성이 충분하면 이것을 사용해도 된다</p></li><li><p>data augmentation : 이미지를 회전, 반전, 확대, 축소 등의 변형을 주어서 데이터의 다양성을 늘리는 방법</p><ul><li>epoch를 증가시킨다</li><li>random rain 같은 트랜스퍼를 진행했을때 다른데도 같이 진행해줘야 된다</li></ul></li><li><p>focal loss : 클래스 간의 데이터의 갯수가 차이가 나는 경우 사용하는 loss function</p><ul><li>데이터의 갯수가 적은 클래스에 가중치를 더 주는 방법</li><li>데이터의 갯수가 많은 클래스에 가중치를 적게 주는 방법</li></ul></li></ul><h2 id="과적합-overfitting"><a href="#과적합-overfitting" class="headerlink" title="과적합(overfitting)"></a>과적합(overfitting)</h2><ul><li>학습 데이터에 대해서는 정확도가 높지만, 테스트 데이터에 대해서는 정확도가 낮은 경우</li><li>일반화 성능을 높히는것이 목적이다</li><li>검증 손실이 증가하기 시작하면 학습을 중단한다</li><li>일반화(regularization)항 추가<ul><li>cost 계산시에 weight의 크기를 더해준다</li></ul></li><li>앙상블(ensemble) : 여러 모델을 합쳐서 사용하는 방법<ul><li>소프트 보팅(soft voting) : 각 모델의 예측값을 평균내어 사용하는 방법</li></ul></li><li>dropout : 학습시에 랜덤하게 뉴런을 제거하는 방법<ul><li>학습시에만 사용하고 예측시에는 사용하지 않는다</li></ul></li></ul><h2 id="이미지-증강-augmentation"><a href="#이미지-증강-augmentation" class="headerlink" title="이미지 증강(augmentation)"></a>이미지 증강(augmentation)</h2><ul><li>transformation : 이미지를 회전, 반전, 확대, 축소 등의 변형을 주어서 데이터의 다양성을 늘리는 방법<ul><li>flip : 이미지를 반전시키는 방법</li><li>rotation : 이미지를 회전시키는 방법</li><li>blur : 이미지를 흐리게 하는 방법</li><li>hueSaturation : 이미지의 채도를 변경하는 방법</li><li>gaussian noise : 이미지에 가우시안 노이즈를 추가하는 방법</li><li>CoarseDropout : 이미지의 일부분을 제거하는 방법</li><li>GrayScale : 이미지를 흑백으로 변경하는 방법</li><li>Mixup : 이미지를 섞는 방법</li><li>CutMix : 이미지를 잘라서 섞는 방법</li><li>Mosiac : 이미지를 섞는 방법</li><li>RandomErasing : 이미지의 일부분을 지우는 방법</li><li>RandomRain : 이미지에 빗방울을 추가하는 방법</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://setosa.io/ev/image-kernels/">Image Kernels</a></li><li><a href="https://neurohive.io/en/popular-networks/vgg16/">VGG16 – Convolutional Network for Classification and Detection</a></li><li><a href="https://oi.readthedocs.io/en/latest/">Organize everything I know</a></li><li><a href="https://github.com/darkpgmr/DarkLabel">DarkLabel</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-07-convolution/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 12 함수형 반복</title>
      <link>https://sejoung.github.io/2024/02/2024-02-07-Grokking_Simplicity_12/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-07-Grokking_Simplicity_12/</guid>
      <pubDate>Wed, 07 Feb 2024 01:07:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-12-함수형-반복&quot;&gt;&lt;a href=&quot;#CHAPTER-12-함수형-반복&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 12 함수형 반복&quot;&gt;&lt;/a&gt;CHAPTER 12 함수형 반복&lt;/h1&gt;&lt;h2 id=&quot;함수형-도
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-12-함수형-반복"><a href="#CHAPTER-12-함수형-반복" class="headerlink" title="CHAPTER 12 함수형 반복"></a>CHAPTER 12 함수형 반복</h1><h2 id="함수형-도구-map"><a href="#함수형-도구-map" class="headerlink" title="함수형 도구: map()"></a>함수형 도구: map()</h2><ul><li>X 값이 있는 배열을 받아서 Y 값이 있는 배열로 변환 한다<h2 id="함수를-전달하는-세-가지-방법"><a href="#함수를-전달하는-세-가지-방법" class="headerlink" title="함수를 전달하는 세 가지 방법"></a>함수를 전달하는 세 가지 방법</h2></li><li>전역으로 정의하기</li><li>지역적으로 정의하기</li><li>인라인으로 정의하기<h2 id="함수형-도구-filter"><a href="#함수형-도구-filter" class="headerlink" title="함수형 도구: filter()"></a>함수형 도구: filter()</h2></li><li>배열에서 일부 항목을 선택하는 함수<h2 id="함수형-도구-reduce"><a href="#함수형-도구-reduce" class="headerlink" title="함수형 도구: reduce()"></a>함수형 도구: reduce()</h2></li><li>배열을 순회하면서 값을 누적한다<h2 id="reduce-로-할-수-있는-것들"><a href="#reduce-로-할-수-있는-것들" class="headerlink" title="reduce()로 할 수 있는 것들"></a>reduce()로 할 수 있는 것들</h2></li><li>실행 취소&#x2F;실행 복귀</li><li>테스트할 때 사용자 입력을 다시 실행하기</li><li>시간 여행 디버깅</li><li>회계 감사 추적<h2 id="세-가지-함수형-도구를-비교하기"><a href="#세-가지-함수형-도구를-비교하기" class="headerlink" title="세 가지 함수형 도구를 비교하기"></a>세 가지 함수형 도구를 비교하기</h2></li><li>map()은 배열의 모든 항복에 함수를 적용해 새로운 배열로 바꾼다</li><li>filter()는 배열의 하위 집합을 선택해 새로운 배열로 만든다</li><li>reduce()는 배열의 항목을 조합해 최종값을 만든다</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-07-Grokking_Simplicity_12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 11 일급 함수 II</title>
      <link>https://sejoung.github.io/2024/02/2024-02-07-Grokking_Simplicity_11/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-07-Grokking_Simplicity_11/</guid>
      <pubDate>Wed, 07 Feb 2024 00:49:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-11-일급-함수-II&quot;&gt;&lt;a href=&quot;#CHAPTER-11-일급-함수-II&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 11 일급 함수 II&quot;&gt;&lt;/a&gt;CHAPTER 11 일급 함수 II&lt;/h1&gt;&lt;h2 i
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-11-일급-함수-II"><a href="#CHAPTER-11-일급-함수-II" class="headerlink" title="CHAPTER 11 일급 함수 II"></a>CHAPTER 11 일급 함수 II</h1><h2 id="코드-냄새-하나와-리팩터링-두-개"><a href="#코드-냄새-하나와-리팩터링-두-개" class="headerlink" title="코드 냄새 하나와 리팩터링 두 개"></a>코드 냄새 하나와 리팩터링 두 개</h2><ul><li>코드의 냄새: 함수 이름에 있는 암묵적 인자<ul><li>거의 똑같이 구현된 함수가 있다</li><li>함수 이름이 구현에 있는 다른 부분을 가르킨다</li></ul></li><li>리팩터링: 암묵적 인자 드러내기</li><li>리팩터링: 함수를 본문을 콜백으로 바꾸기</li></ul><h2 id="카피-온-라이트-리팩터링하기"><a href="#카피-온-라이트-리팩터링하기" class="headerlink" title="카피-온-라이트 리팩터링하기"></a>카피-온-라이트 리팩터링하기</h2><ul><li>함수 본문을 콜백으로 바꾸기 단계<ul><li>본문과 앞부분 뒷부분을 확인하기</li><li>함수 빼내기</li><li>콜백 빼내기</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-07-Grokking_Simplicity_11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 10 일급 함수 I</title>
      <link>https://sejoung.github.io/2024/02/2024-02-06-Grokking_Simplicity_10/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-06-Grokking_Simplicity_10/</guid>
      <pubDate>Tue, 06 Feb 2024 01:03:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-10-일급-함수-I&quot;&gt;&lt;a href=&quot;#CHAPTER-10-일급-함수-I&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 10 일급 함수 I&quot;&gt;&lt;/a&gt;CHAPTER 10 일급 함수 I&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-10-일급-함수-I"><a href="#CHAPTER-10-일급-함수-I" class="headerlink" title="CHAPTER 10 일급 함수 I"></a>CHAPTER 10 일급 함수 I</h1><ul><li>코드의 냄새: 함수 이름에 있는 암묵적 인자<ul><li>특징<ul><li>거의 똑같이 구현된 함수가 있다</li><li>함수 이름이 구현에 있는 다른 부분을 가리킨다</li></ul></li></ul></li><li>리팩터링: 암묵적 인자를 드러내기<ul><li>단계<ul><li>함수 이름에 있는 암묵적 인자를 확인한다</li><li>명시적인 인자를 추가한다</li><li>함수 본문에 하드 코딩된 값을 새로운 인자로 바꾼다</li><li>함수를 호출하는 곳을 고친다</li></ul></li></ul></li><li>리팩터링: 함수 본문을 콜백으로 바꾸기<ul><li>단계<ul><li>함수 본문에서 바꿀 부분의 앞부분과 뒷부분을 확인한다</li><li>리팩터링 할 코드를 함수로 빼낸다</li><li>빼낸 함수의 인자로 넘길 부분을 또 다른 함수로 빼낸다</li></ul></li></ul></li></ul><h2 id="리팩터링-암묵적-인자를-드러내기"><a href="#리팩터링-암묵적-인자를-드러내기" class="headerlink" title="리팩터링: 암묵적 인자를 드러내기"></a>리팩터링: 암묵적 인자를 드러내기</h2><p>일급 값(first-class value)은 언어에 있는 다른 값처럼 쓸수 있다</p><h2 id="일급인-것과-일급이-아닌-것을-구별하기"><a href="#일급인-것과-일급이-아닌-것을-구별하기" class="headerlink" title="일급인 것과 일급이 아닌 것을 구별하기"></a>일급인 것과 일급이 아닌 것을 구별하기</h2><p>자바 스크립트에서 일급이 아닌것</p><ul><li>수식 연산자</li><li>반복문</li><li>조건문</li><li>try&#x2F;catch 블록</li></ul><h2 id="객체와-배열을-너무-많이-쓰게-됩니다"><a href="#객체와-배열을-너무-많이-쓰게-됩니다" class="headerlink" title="객체와 배열을 너무 많이 쓰게 됩니다"></a>객체와 배열을 너무 많이 쓰게 됩니다</h2><p>데이터 지향(data orientation)은 이벤트와 엔티티에 대한 사실을 표현하기 위해 일반 데이터 구조를 사용하는 프로그래밍 형식</p><h2 id="어떤-문법이든-일급-함수로-바꿀-수-있습니다"><a href="#어떤-문법이든-일급-함수로-바꿀-수-있습니다" class="headerlink" title="어떤 문법이든 일급 함수로 바꿀 수 있습니다"></a>어떤 문법이든 일급 함수로 바꿀 수 있습니다</h2><p>고차함수(higher-order function)는 함수를 인자로 받거나 함수를 반환하는 함수</p><h2 id="이것은-무슨-문법인가요"><a href="#이것은-무슨-문법인가요" class="headerlink" title="이것은 무슨 문법인가요?"></a>이것은 무슨 문법인가요?</h2><p>함수를 정의하는 방법</p><ul><li>전역으로 정의하기</li><li>지역적으로 정의하기</li><li>인라인으로 정의하기<h2 id="왜-본문을-함수로-감싸서-넘기나요"><a href="#왜-본문을-함수로-감싸서-넘기나요" class="headerlink" title="왜 본문을 함수로 감싸서 넘기나요?"></a>왜 본문을 함수로 감싸서 넘기나요?</h2>함수의 실행을 미루는 일반적인 방법</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-06-Grokking_Simplicity_10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>선형 회귀(Linear Regression)</title>
      <link>https://sejoung.github.io/2024/02/2024-02-05-linear_regression/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-05-linear_regression/</guid>
      <pubDate>Mon, 05 Feb 2024 07:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;선형-회귀-Linear-Regression&quot;&gt;&lt;a href=&quot;#선형-회귀-Linear-Regression&quot; class=&quot;headerlink&quot; title=&quot;선형 회귀(Linear Regression)&quot;&gt;&lt;/a&gt;선형 회귀(Linear Reg
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="선형-회귀-Linear-Regression"><a href="#선형-회귀-Linear-Regression" class="headerlink" title="선형 회귀(Linear Regression)"></a>선형 회귀(Linear Regression)</h1><p>Linear -&gt; 선을 그려</p><p>Regression -&gt; 값을 예측</p><p>회귀(Regression)는 통계학과 머신러닝에서 사용되는 용어로, 어떤 변수의 값을 다른 변수의 값으로 예측하거나 설명하는 모델</p><ul><li>데이터를 일반화하는 선을 찾는다</li><li>그 선을 이용해 새로운 데이터를 예측한다</li></ul><p>y &#x3D; ax+b</p><p>가증합으로 새로운 특성을 만들어낸다</p><h2 id="로지스틱-회귀분석-logistic-regression"><a href="#로지스틱-회귀분석-logistic-regression" class="headerlink" title="로지스틱 회귀분석(logistic regression)"></a>로지스틱 회귀분석(logistic regression)</h2><p>input과 weight를 곱해서 더하는 과정은 linear combination(선형 결합)이다.<br>인공신경망의 학습은 각 뉴런에 곱해지는 ‘weight’라는 모수(parameter)를 추정(estimate)하는 과정이다</p><p>로지스틱 회귀분석은 generalized linear model(GLM)의 일종이다</p><p>로지스틱 함수가 바로 우리가 활성함수로 사용하는 sigmoid function이다</p><p>Sigmoid를 활성함수로 사용하는 multi layer perceptron neural network의 hidden layer의 각 뉴런은 로지스틱 회귀분석을 하는 것과 정확히 일치</p><h2 id="activation-function의-종류"><a href="#activation-function의-종류" class="headerlink" title="activation function의 종류"></a>activation function의 종류</h2><ul><li>sigmoid</li><li>tanh</li><li>ReLU(Rectified Linear Unit)</li></ul><h2 id="Bias-and-Variance-편향과-분산"><a href="#Bias-and-Variance-편향과-분산" class="headerlink" title="Bias and Variance (편향과 분산)"></a>Bias and Variance (편향과 분산)</h2><p>예측값들과 정답이 대처로 멀리 떨어져 있으면 결과의 편향(bias)이 높다고 말하고<br>예측값들이 자기들끼리 대체로 멀리 흩어져 있으면 결과의 분산(variance)이 높다고 말한다.</p><h2 id="독립변수와-종속변수"><a href="#독립변수와-종속변수" class="headerlink" title="독립변수와 종속변수"></a>독립변수와 종속변수</h2><p>표에서 변수는 열</p><ul><li>독립변수<ul><li>원인이 되는 것</li><li>결과랑 상관없는 것</li></ul></li><li>종속변수<ul><li>결과가 되는 것</li><li>원인에 종속되어 있는것</li></ul></li></ul><h3 id="상관관계"><a href="#상관관계" class="headerlink" title="상관관계"></a>상관관계</h3><p>한쪽의 값이 바뀌었을 때, 다른 쪽의 값도 바뀐다면,<br>두 개의 특성은 ‘서로 관련이 있다’고 추측할 수 있습니다.<br>그리고, 이런 관계를 ‘상관관계’라고 합니다.</p><h3 id="인과관계"><a href="#인과관계" class="headerlink" title="인과관계"></a>인과관계</h3><p>각 열이 원인과 결과의 관계일 때<br>인과관계가 있다고 합니다.</p><h2 id="지도-학습"><a href="#지도-학습" class="headerlink" title="지도 학습"></a>지도 학습</h2><ul><li>분류 (Classification)</li><li>회귀 (Regression)</li></ul><h3 id="분류-Classification"><a href="#분류-Classification" class="headerlink" title="분류(Classification)"></a>분류(Classification)</h3><p>결과가 숫자가 아니라 손톱, 정상과 같은 이름이면 분류(Classification)를 사용한다</p><h3 id="회귀-Regression"><a href="#회귀-Regression" class="headerlink" title="회귀(Regression)"></a>회귀(Regression)</h3><p>예측하고 싶은 종속변수가 숫자일 때 회귀(Regression)를 사용한다</p><h2 id="비지도-학습"><a href="#비지도-학습" class="headerlink" title="비지도 학습"></a>비지도 학습</h2><ul><li><p>군집 (Clustering)</p><ul><li>비슷한 것들끼리 모아서 적당한 그룹을 만들 것입니다 이렇게 그룹을 만드는 것이 군집</li><li>좌표 평면을 사용하면 군집을 쉽게 볼 수 있습니다</li></ul></li><li><p>연관 규칙 학습(Association Rule Learning)</p><ul><li>어떤 물건을 살 때 다른 물건도 같이 살 확률이 높다면, 그 물건들은 연관이 있다고 볼 수 있습니다</li><li>이런 연관을 찾는 것이 연관 규칙 학습</li></ul></li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://gaussian37.github.io/machine-learning-concept-bias_and_variance/">머신러닝에서의 Bias와 Variance</a></li><li><a href="https://pozalabs.github.io/Activation_Function/">Activation Function(활성함수)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-05-linear_regression/#disqus_thread</comments>
    </item>
    
    <item>
      <title>신경망(Neural Networks)</title>
      <link>https://sejoung.github.io/2024/02/2024-02-06-neural_networks/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-06-neural_networks/</guid>
      <pubDate>Mon, 05 Feb 2024 07:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;신경망-Neural-Networks&quot;&gt;&lt;a href=&quot;#신경망-Neural-Networks&quot; class=&quot;headerlink&quot; title=&quot;신경망(Neural Networks)&quot;&gt;&lt;/a&gt;신경망(Neural Networks)&lt;/h1&gt;&lt;h2
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="신경망-Neural-Networks"><a href="#신경망-Neural-Networks" class="headerlink" title="신경망(Neural Networks)"></a>신경망(Neural Networks)</h1><h2 id="행렬곱"><a href="#행렬곱" class="headerlink" title="행렬곱"></a>행렬곱</h2><ul><li>one-hot encoding 통해서 행렬을 만들고 가중치 행렬과 행렬곱을 수행하여 예측값을 만들어낸다.</li></ul><h2 id="경사-하강법-Gradient-Descent"><a href="#경사-하강법-Gradient-Descent" class="headerlink" title="경사 하강법(Gradient Descent)"></a>경사 하강법(Gradient Descent)</h2><ul><li>경사 하강법은 함수의 기울기를 구하고, 기울기가 낮은 쪽으로 이동시키면서 최소값을 찾는 방법이다. (최소 cost&#x2F;loss를 찾는 방법)</li></ul><h2 id="Optimizer의-종류"><a href="#Optimizer의-종류" class="headerlink" title="Optimizer의 종류"></a>Optimizer의 종류</h2><ul><li>SGD(Stochastic Gradient Descent)</li><li>mini-batch SGD</li><li>Momentum</li><li>RMSprop</li><li>Adam</li></ul><h2 id="역전파-Backpropagation"><a href="#역전파-Backpropagation" class="headerlink" title="역전파(Backpropagation)"></a>역전파(Backpropagation)</h2><ul><li>연쇄 법칙(Chain Rule)을 신경망의 그래디언트 계산에 적용한 것</li></ul><h2 id="소프트-맥스-Softmax"><a href="#소프트-맥스-Softmax" class="headerlink" title="소프트 맥스(Softmax)"></a>소프트 맥스(Softmax)</h2><ul><li>소프트맥스 함수는 입력받은 값을 출력으로 0~1사이의 값으로 모두 정규화하며 출력 값들의 총합은 항상 1이 되는 특성을 가진 함수이다.</li><li>예측값을 확률값으로 변환</li><li>출력노드가 2개 이상일때</li></ul><h2 id="크로스엔트로피-Cross-Entropy"><a href="#크로스엔트로피-Cross-Entropy" class="headerlink" title="크로스엔트로피(Cross-Entropy)"></a>크로스엔트로피(Cross-Entropy)</h2><ul><li>모델에서 예측한 확률값이 실제값과 비교했을 때 틀릴 수 있는 정보량</li><li>cost function으로 사용</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.youtube.com/watch?v=d14TUNcbn1k">Lecture 4 | Introduction to Neural Networks</a></li><li><a href="https://aikorea.org/cs231n/optimization-2/">CS231n Convolutional Neural Networks for Visual Recognition kor</a></li><li><a href="https://cs231n.github.io/optimization-2/">CS231n Convolutional Neural Networks for Visual Recognition en</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-06-neural_networks/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 9 계층형 설계 II</title>
      <link>https://sejoung.github.io/2024/02/2024-02-05-Grokking_Simplicity_9/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-05-Grokking_Simplicity_9/</guid>
      <pubDate>Mon, 05 Feb 2024 01:27:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-9-계층형-설계-II&quot;&gt;&lt;a href=&quot;#CHAPTER-9-계층형-설계-II&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 9 계층형 설계 II&quot;&gt;&lt;/a&gt;CHAPTER 9 계층형 설계 II&lt;/h1&gt;&lt;h2 i
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-9-계층형-설계-II"><a href="#CHAPTER-9-계층형-설계-II" class="headerlink" title="CHAPTER 9 계층형 설계 II"></a>CHAPTER 9 계층형 설계 II</h1><h2 id="계층형-설계-패턴"><a href="#계층형-설계-패턴" class="headerlink" title="계층형 설계 패턴"></a>계층형 설계 패턴</h2><ul><li>패턴 1: 직접구현</li><li>패턴 2: 추상화 벽</li><li>패턴 3: 작은 인터페이스</li><li>패턴 4: 편리한 계층</li></ul><h2 id="패턴-2-추상화-벽"><a href="#패턴-2-추상화-벽" class="headerlink" title="패턴 2: 추상화 벽"></a>패턴 2: 추상화 벽</h2><p>추상화의 벽(abstraction barrier)은 세부 구현을 감춘 함수로 이루어진 계층<br>팀 간 책임을 명확하게 나누는 것</p><h2 id="세부적인-것을-감추는-것은-대칭적입니다"><a href="#세부적인-것을-감추는-것은-대칭적입니다" class="headerlink" title="세부적인 것을 감추는 것은 대칭적입니다"></a>세부적인 것을 감추는 것은 대칭적입니다</h2><p>추상화의 벽이 잘작동 하면 세부사항 변경에 다른 팀은 알 필요가 없다</p><h2 id="추상화-벽이-있으면-구체적인-것을-신경-쓰지-않아도-됩니다"><a href="#추상화-벽이-있으면-구체적인-것을-신경-쓰지-않아도-됩니다" class="headerlink" title="추상화 벽이 있으면 구체적인 것을 신경 쓰지 않아도 됩니다"></a>추상화 벽이 있으면 구체적인 것을 신경 쓰지 않아도 됩니다</h2><p>추상화 벽은 필요하지 않은 것은 무시할 수 있도록 간접적인 단계를 만듭니다</p><h2 id="추상화-벽은-언제-사용하면-좋을까요"><a href="#추상화-벽은-언제-사용하면-좋을까요" class="headerlink" title="추상화 벽은 언제 사용하면 좋을까요?"></a>추상화 벽은 언제 사용하면 좋을까요?</h2><ul><li>쉽게 구현을 바꾸기 위해</li><li>코드를 읽고 쓰기 쉽게 만들기 위해</li><li>팀 간에 조율해야 할 것을 줄이기 위해</li><li>주어진 문제에 집중하기 위해</li></ul><h2 id="패턴-3-작은-인터페이스"><a href="#패턴-3-작은-인터페이스" class="headerlink" title="패턴 3: 작은 인터페이스"></a>패턴 3: 작은 인터페이스</h2><ul><li>추상화 벽에 만든 함수는 인터페이스라고 생각 할 수 있다</li><li>함수 목적에 맞는 계층이 어디인지 찾는 감각을 기르는 것이 가장 중요하다</li></ul><h2 id="패턴-4-편리한-계층"><a href="#패턴-4-편리한-계층" class="headerlink" title="패턴 4: 편리한 계층"></a>패턴 4: 편리한 계층</h2><p>편리한 계층(comfortable layer)은 계층을 추가하는 것이 좋은 이유를 찾는 것</p><p>지금 편리한지 생각하고 편리하면 설계를 멈춘다</p><h2 id="그래프로-알-수-있는-코드에-대한-정보는-무엇이-있을까요"><a href="#그래프로-알-수-있는-코드에-대한-정보는-무엇이-있을까요" class="headerlink" title="그래프로 알 수 있는 코드에 대한 정보는 무엇이 있을까요?"></a>그래프로 알 수 있는 코드에 대한 정보는 무엇이 있을까요?</h2><p>호출 그래프로 알수 있는 세 가지 비기능적 요구사항</p><ul><li>유지보수성</li><li>테스트성</li><li>재사용성</li></ul><h2 id="그래프의-가장-위에-있는-코드가-고치기-가장-쉽습니다"><a href="#그래프의-가장-위에-있는-코드가-고치기-가장-쉽습니다" class="headerlink" title="그래프의 가장 위에 있는 코드가 고치기 가장 쉽습니다"></a>그래프의 가장 위에 있는 코드가 고치기 가장 쉽습니다</h2><h2 id="아래에-있는-코드는-테스트가-중요합니다"><a href="#아래에-있는-코드는-테스트가-중요합니다" class="headerlink" title="아래에 있는 코드는 테스트가 중요합니다"></a>아래에 있는 코드는 테스트가 중요합니다</h2><h2 id="아래에-있는-코드가-재사용하기-더-좋습니다"><a href="#아래에-있는-코드가-재사용하기-더-좋습니다" class="headerlink" title="아래에 있는 코드가 재사용하기 더 좋습니다"></a>아래에 있는 코드가 재사용하기 더 좋습니다</h2><h2 id="요약-그래프가-코드에-대해-알려주는-것"><a href="#요약-그래프가-코드에-대해-알려주는-것" class="headerlink" title="요약: 그래프가 코드에 대해 알려주는 것"></a>요약: 그래프가 코드에 대해 알려주는 것</h2><ul><li>유지보수성<ul><li>위로 연결된 것이 적은 함수가 바꾸기 쉽다</li></ul></li><li>테스트성<ul><li>위쪽으로 많이 연결된 함수를 테스트하는 것이 더 가치 있다</li></ul></li><li>재사용성<ul><li>아래쪽에 함수가 적을수록 더 재사용하기 좋다</li></ul></li></ul><p>낮은 수준의 단계로 함수를 빼내면 재사용성이 더 높아진다</p><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-05-Grokking_Simplicity_9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 8 계층형 설계 I</title>
      <link>https://sejoung.github.io/2024/02/2024-02-02-Grokking_Simplicity_8/</link>
      <guid>https://sejoung.github.io/2024/02/2024-02-02-Grokking_Simplicity_8/</guid>
      <pubDate>Fri, 02 Feb 2024 02:01:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-8-계층형-설계-I&quot;&gt;&lt;a href=&quot;#CHAPTER-8-계층형-설계-I&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 8 계층형 설계 I&quot;&gt;&lt;/a&gt;CHAPTER 8 계층형 설계 I&lt;/h1&gt;&lt;h2 id=&quot;소
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-8-계층형-설계-I"><a href="#CHAPTER-8-계층형-설계-I" class="headerlink" title="CHAPTER 8 계층형 설계 I"></a>CHAPTER 8 계층형 설계 I</h1><h2 id="소프트웨어-설계란-무엇입니까"><a href="#소프트웨어-설계란-무엇입니까" class="headerlink" title="소프트웨어 설계란 무엇입니까?"></a>소프트웨어 설계란 무엇입니까?</h2><ul><li>소프트 웨어 설계 : 코드를 만들고, 테스트하고, 유지보수하기 쉬운 프로그래밍 방법을 선택하기 위해 미적 감각을 사용하는 것</li></ul><h2 id="계층형-설계란-무엇인가요"><a href="#계층형-설계란-무엇인가요" class="headerlink" title="계층형 설계란 무엇인가요?"></a>계층형 설계란 무엇인가요?</h2><ul><li>계층형 설계는 소프트웨어를 계층으로 구성하는 기술<ul><li>각 계층에 있는 함수는 바로 아래 계층에 있는 함수를 이용해 정의</li></ul></li></ul><h2 id="설계-감각을-키우기"><a href="#설계-감각을-키우기" class="headerlink" title="설계 감각을 키우기"></a>설계 감각을 키우기</h2><ul><li>전문가의 저주<ul><li>전문가는 자신의 지식을 다른 사람에게 전달하기 어렵다.</li></ul></li></ul><h2 id="계층형-설계-패턴"><a href="#계층형-설계-패턴" class="headerlink" title="계층형 설계 패턴"></a>계층형 설계 패턴</h2><ul><li>패턴 1: 직접 구현<ul><li>함수 시그니처가 나타내고 있는 문제를 함수 본문에서 적절한 구체화 수준에서 해결해야 한다</li></ul></li><li>패턴 2: 추상화의 벽<ul><li>중요한 세부 구현을 감추고 인터페이스로 제공한다</li></ul></li><li>패턴 3: 작은 인터페이스<ul><li>중요한 인터페이스는 작고 강력한 동작으로 구성하는 것이 좋다</li></ul></li><li>패턴 4: 편리한 계층<ul><li>그냥 좋아서 계층을 추가하면 안됨 코드와 그 코드가 속한 추상화 계층은 작업할 때 편리해야 한다</li></ul></li></ul><h2 id="패턴-1-직접-구현"><a href="#패턴-1-직접-구현" class="headerlink" title="패턴 1: 직접 구현"></a>패턴 1: 직접 구현</h2><p>같은 계층에 있는 함수는 같은 목적을 가져야 한다</p><h2 id="3단계-줌-레벨"><a href="#3단계-줌-레벨" class="headerlink" title="3단계 줌 레벨"></a>3단계 줌 레벨</h2><ul><li>전역 줌 레벨<ul><li>전역 줌 레벨로 그래프 전체 중 필요한 부분을 살펴볼 수 있다</li><li>함수가 가르키는 화살표를 계층간에 비교할 수 있다</li></ul></li><li>계층 줌 레벨<ul><li>한계층과 연결된 바로 아래 계층을 볼수 있는 줌레벨</li><li>함수 하나가 가진 화살표를 비교 할수 있다</li></ul></li><li>함수 줌 레벨<ul><li>함수 하나와 바로 아래 연결된 함수들을 볼 수 있다</li></ul></li></ul><h2 id="직접-구현-패턴-리뷰"><a href="#직접-구현-패턴-리뷰" class="headerlink" title="직접 구현 패턴 리뷰"></a>직접 구현 패턴 리뷰</h2><ul><li>직접 구현한 코드는 한 단계의 구체화 수준에 관한 문제만 해결합니다</li><li>계층형 설계는 특정 구체화 단계에 집중할 수 있게 도와줍니다</li><li>호출 그래프는 구체화 단계에 대한 풍부한 단서를 보여준다</li><li>함수를 추출하면 더 일반적인 함수로 만들수 있다</li><li>일반적인 함수가 많을수록 재사용하기 좋다</li><li>복잡성을 감추지 않는다</li></ul><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/02/2024-02-02-Grokking_Simplicity_8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 7 신뢰할 수 없는 코드를 쓰면서 불변성 지키기</title>
      <link>https://sejoung.github.io/2024/01/2024-01-29-Grokking_Simplicity_7/</link>
      <guid>https://sejoung.github.io/2024/01/2024-01-29-Grokking_Simplicity_7/</guid>
      <pubDate>Mon, 29 Jan 2024 05:01:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-7-신뢰할-수-없는-코드를-쓰면서-불변성-지키기&quot;&gt;&lt;a href=&quot;#CHAPTER-7-신뢰할-수-없는-코드를-쓰면서-불변성-지키기&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 7 신뢰할 수 없는 코드를 쓰
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-7-신뢰할-수-없는-코드를-쓰면서-불변성-지키기"><a href="#CHAPTER-7-신뢰할-수-없는-코드를-쓰면서-불변성-지키기" class="headerlink" title="CHAPTER 7 신뢰할 수 없는 코드를 쓰면서 불변성 지키기"></a>CHAPTER 7 신뢰할 수 없는 코드를 쓰면서 불변성 지키기</h1><h2 id="레거시-코드와-불변성"><a href="#레거시-코드와-불변성" class="headerlink" title="레거시 코드와 불변성"></a>레거시 코드와 불변성</h2><p>방어적 복사 : 카피-온-라이트 원칙을 지키면서 안전하게 함수를 사용할수 있는 다른 원칙 </p><h2 id="우리가-만든-카피-온-라이트-코드는-신뢰할-수-없는-코드와-상호작용해야-합니다"><a href="#우리가-만든-카피-온-라이트-코드는-신뢰할-수-없는-코드와-상호작용해야-합니다" class="headerlink" title="우리가 만든 카피-온-라이트 코드는 신뢰할 수 없는 코드와 상호작용해야 합니다"></a>우리가 만든 카피-온-라이트 코드는 신뢰할 수 없는 코드와 상호작용해야 합니다</h2><p>모든 코드는 불변성이 지켜지는 안전지대에 있다</p><p>안전지대 밖으로 나가는 데이터는 바뀔수도 있다. 신뢰할 수 없는 코드가 데이터를 바꿀수 있기 때문이다<br>불변성을 지키면서 데이터를 주고 받는 법을 찾아야된다</p><p>레거시 코드를 바꿀수 없을때 방어적 복사를 사용할수도 있다</p><h2 id="방어적-복사는-원본이-바뀌는-것을-막아-줍니다"><a href="#방어적-복사는-원본이-바뀌는-것을-막아-줍니다" class="headerlink" title="방어적 복사는 원본이 바뀌는 것을 막아 줍니다"></a>방어적 복사는 원본이 바뀌는 것을 막아 줍니다</h2><p>들어오고 나가는 데이터의 복사본을 만드는 것이 방어적 복사가 동작하는 방식</p><h2 id="방어적-복사-구현하기"><a href="#방어적-복사-구현하기" class="headerlink" title="방어적 복사 구현하기"></a>방어적 복사 구현하기</h2><p>복사할때는 깊은 복사를 사용해야 된다</p><h2 id="방어적-복사-규칙"><a href="#방어적-복사-규칙" class="headerlink" title="방어적 복사 규칙"></a>방어적 복사 규칙</h2><ul><li>데이터가 안전한 코드에서 나갈 때 복사하기<ul><li>불변성 데이터를 위한 깊은 복사본을 만든다</li><li>신뢰할 수 없는 코드로 복사본을 전달한다</li></ul></li><li>안전한 코드로 데이터가 들어올 때 복사하기<ul><li>변경될 수도 있는 데이터가 들어오면 바로 깊은 복사본을 만들어 안전한 코드로 전달한다</li><li>복사본을 안전한 코드에서 사용한다</li></ul></li></ul><h2 id="신뢰할-수-없는-코드-감싸기"><a href="#신뢰할-수-없는-코드-감싸기" class="headerlink" title="신뢰할 수 없는 코드 감싸기"></a>신뢰할 수 없는 코드 감싸기</h2><p>방어적 복사 코드를 분리해 새로운 함수로 만들어 두면 좋다</p><h2 id="방어적-복사가-익숙할-수도-있습니다"><a href="#방어적-복사가-익숙할-수도-있습니다" class="headerlink" title="방어적 복사가 익숙할 수도 있습니다"></a>방어적 복사가 익숙할 수도 있습니다</h2><ul><li>웹 API속에 방어적 복사<ul><li>JSON 으로 데이터를 주고 받을 때</li></ul></li><li>얼랭과 엘릭서에서 방어적 복사<ul><li>서로 메시지를 주고 받을때</li></ul></li></ul><h2 id="카피-온-라이트와-방어적-복사를-비교해-봅시다"><a href="#카피-온-라이트와-방어적-복사를-비교해-봅시다" class="headerlink" title="카피-온-라이트와 방어적 복사를 비교해 봅시다"></a>카피-온-라이트와 방어적 복사를 비교해 봅시다</h2><h3 id="카피-온-라이트"><a href="#카피-온-라이트" class="headerlink" title="카피-온-라이트"></a>카피-온-라이트</h3><p>언제 쓰나요?</p><ul><li>통제할수 있는 데이터를 바꿀때</li></ul><p>어디서 쓰나요?</p><ul><li>안전지대 어디에서나?</li></ul><p>복사방식</p><ul><li>얕은복사</li></ul><p>규칙</p><ul><li>바꿀 데이터의 얕은 복사를 만든다</li><li>복사본을 변경한다</li><li>복사본을 리턴한다</li></ul><h3 id="방어적-복사"><a href="#방어적-복사" class="headerlink" title="방어적 복사"></a>방어적 복사</h3><p>언제 쓰나요?</p><ul><li>신뢰할 수 없는 코드와 데이터를 주고받아야 할때<br>어디서 쓰나요?</li><li>안전지대의 경계에서 데이터가 오고 갈 때<br>복사방식</li><li>깊은 복사<br>규칙</li><li>안전지대로 들어오는 데이터에 깊은 복사를 만듬</li><li>안전지대에서 나가는 데이터에 깊은 복사를 만듬</li></ul><h2 id="깊은-복사는-얕은-복사보다-비쌉니다"><a href="#깊은-복사는-얕은-복사보다-비쌉니다" class="headerlink" title="깊은 복사는 얕은 복사보다 비쌉니다"></a>깊은 복사는 얕은 복사보다 비쌉니다</h2><p>깊은 복사는 원본과 어떤 데이터 구조도 공유하지 않는것이 얕은 복사와 차이점</p><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/01/2024-01-29-Grokking_Simplicity_7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CHAPTER 6 변경 가능한 데이터 구조를 가진 언어에서 불변성 유지하기</title>
      <link>https://sejoung.github.io/2024/01/2024-01-26-Grokking_Simplicity_6/</link>
      <guid>https://sejoung.github.io/2024/01/2024-01-26-Grokking_Simplicity_6/</guid>
      <pubDate>Fri, 26 Jan 2024 00:43:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;CHAPTER-6-변경-가능한-데이터-구조를-가진-언어에서-불변성-유지하기&quot;&gt;&lt;a href=&quot;#CHAPTER-6-변경-가능한-데이터-구조를-가진-언어에서-불변성-유지하기&quot; class=&quot;headerlink&quot; title=&quot;CHAPTER 6 
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="CHAPTER-6-변경-가능한-데이터-구조를-가진-언어에서-불변성-유지하기"><a href="#CHAPTER-6-변경-가능한-데이터-구조를-가진-언어에서-불변성-유지하기" class="headerlink" title="CHAPTER 6 변경 가능한 데이터 구조를 가진 언어에서 불변성 유지하기"></a>CHAPTER 6 변경 가능한 데이터 구조를 가진 언어에서 불변성 유지하기</h1><h2 id="동작을-읽기-쓰기-또는-둘-다로-분류하기"><a href="#동작을-읽기-쓰기-또는-둘-다로-분류하기" class="headerlink" title="동작을 읽기, 쓰기 또는 둘 다로 분류하기"></a>동작을 읽기, 쓰기 또는 둘 다로 분류하기</h2><p>쓰기 동작은 불변성원칙에 따라 구현해야 한다<br>불변성 원칙은 카피-온-라이트(Copy-On-Write)라고 한다</p><h2 id="카피-온-라이트-원칙-세-단계"><a href="#카피-온-라이트-원칙-세-단계" class="headerlink" title="카피-온-라이트 원칙 세 단계"></a>카피-온-라이트 원칙 세 단계</h2><ul><li>복사본 만들기</li><li>복사본 변경하기</li><li>복사본 리턴하기</li></ul><h2 id="쓰기를-하면서-읽기도-하는-동작은-어떻게-해야-할까요"><a href="#쓰기를-하면서-읽기도-하는-동작은-어떻게-해야-할까요" class="headerlink" title="쓰기를 하면서 읽기도 하는 동작은 어떻게 해야 할까요?"></a>쓰기를 하면서 읽기도 하는 동작은 어떻게 해야 할까요?</h2><ul><li>읽기와 쓰기 함수로 각각 분리한다</li><li>함수에서 값을 두개 리턴한다</li></ul><h2 id="쓰면서-읽기도-하는-함수를-분리하기"><a href="#쓰면서-읽기도-하는-함수를-분리하기" class="headerlink" title="쓰면서 읽기도 하는 함수를 분리하기"></a>쓰면서 읽기도 하는 함수를 분리하기</h2><ul><li>읽기와 쓰기 동작으로 분리</li><li>쓰기 동작을 카피-온-라이트로 바꾸기</li></ul><h2 id="값을-두-개-리턴하는-함수로-만들기"><a href="#값을-두-개-리턴하는-함수로-만들기" class="headerlink" title="값을 두 개 리턴하는 함수로 만들기"></a>값을 두 개 리턴하는 함수로 만들기</h2><ul><li>동작 감싸기</li><li>읽으면서 쓰기도 하는 함수를 읽기 함수로 바꾸기</li><li>다른방법<ul><li>첫번째 접근방법(함수 분리)을 사용해 두값을 객체로 조합하는 방법</li></ul></li></ul><h2 id="불변-데이터-구조를-읽는-것은-계산입니다"><a href="#불변-데이터-구조를-읽는-것은-계산입니다" class="headerlink" title="불변 데이터 구조를 읽는 것은 계산입니다"></a>불변 데이터 구조를 읽는 것은 계산입니다</h2><ul><li>변경 가능한 데이터를 읽는 것은 액션</li><li>쓰기는 데이터를 변경 가능한 구조로 만듬</li><li>어떤 데이터에 쓰기가 없다면 데이터는 변경 불가능한 데이터</li><li>불변 데이터 구조를 읽는 것은 계산</li><li>쓰기를 읽기로 바꾸면 코드에 계산이 많아짐</li></ul><h2 id="애플리케이션에는-시간에-따라-변하는-상태가-있습니다"><a href="#애플리케이션에는-시간에-따라-변하는-상태가-있습니다" class="headerlink" title="애플리케이션에는 시간에 따라 변하는 상태가 있습니다"></a>애플리케이션에는 시간에 따라 변하는 상태가 있습니다</h2><h2 id="불변-데이터-구조는-충분히-빠릅니다"><a href="#불변-데이터-구조는-충분히-빠릅니다" class="headerlink" title="불변 데이터 구조는 충분히 빠릅니다"></a>불변 데이터 구조는 충분히 빠릅니다</h2><p>일반적으로 불변 데이터 구조는 변경 가능한 데이터 구조보다 메모리를 더 많이 쓰고 느리다<br>하지만 불변 데이터 구조를 사용하면서 대용량의 고성능 시스템을 구현하는 사례는 많이 있다<br>이런 사례는 불변 데이터도 충분히 빠르다는 증거 입니다</p><ul><li>언제든 최적화할 수 있다</li><li>가비지 콜렉터는 매우 빠르다</li><li>생각보다 많이 복사하지 않다<ul><li>얕은 복사(Shallow Copy) : 데이터의 최상위 단계만 복사</li><li>얕은 복사는 같은 메모리를 가리키는 참조에 대한 복사본을 만든다 이것은 구조적 공유(Structural Sharing)라고 한다</li><li>앝은 복사는 공유된 복사본이 변경되지 않는한 안전하다</li></ul></li><li>함수형 프로그래밍 언어에는 빠른 구현체가 있다</li></ul><h3 id="앝은-복사를-구조적-복사라고-하는-이유"><a href="#앝은-복사를-구조적-복사라고-하는-이유" class="headerlink" title="앝은 복사를 구조적 복사라고 하는 이유"></a>앝은 복사를 구조적 복사라고 하는 이유</h3><p>아래처럼 최상위는 정상적으로 복사 된다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = [<span class="string">&quot;beni&quot;</span>, <span class="string">&quot;hans&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> copy = original.<span class="title function_">slice</span>();</span><br><span class="line">original.<span class="title function_">push</span>(<span class="string">&quot;grace&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(original);<span class="comment">// [ &#x27;beni&#x27;, &#x27;hans&#x27;, &#x27;grace&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy);<span class="comment">// [ &#x27;beni&#x27;, &#x27;hans&#x27; ]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = &#123;<span class="attr">name</span>: <span class="string">&quot;beni&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">custom</span>: [&#123;<span class="attr">hair</span>: <span class="string">&quot;black&quot;</span>, <span class="attr">eyes</span>: <span class="string">&quot;brown&quot;</span>&#125;]&#125;;</span><br><span class="line"><span class="keyword">const</span> copy = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, original)</span><br><span class="line">copy.<span class="property">name</span> = <span class="string">&quot;black&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(original);<span class="comment">//&#123; name: &#x27;beni&#x27;, age: 30, custom: [ &#123; hair: &#x27;black&#x27;, eyes: &#x27;brown&#x27; &#125; ] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy);<span class="comment">//&#123; name: &#x27;black&#x27;, age: 30, custom: [ &#123; hair: &#x27;black&#x27;, eyes: &#x27;brown&#x27; &#125; ] &#125;</span></span><br></pre></td></tr></table></figure><p>아래처럼 하지만 하위 값은 복사가 안된다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = &#123;<span class="attr">name</span>: <span class="string">&quot;beni&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">custom</span>: [&#123;<span class="attr">hair</span>: <span class="string">&quot;black&quot;</span>, <span class="attr">eyes</span>: <span class="string">&quot;brown&quot;</span>&#125;]&#125;;</span><br><span class="line"><span class="keyword">const</span> copy = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, original)</span><br><span class="line">copy.<span class="property">custom</span>[<span class="number">0</span>].<span class="property">eyes</span> = <span class="string">&quot;black&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(original);<span class="comment">//&#123; name: &#x27;beni&#x27;, age: 30, custom: [ &#123; hair: &#x27;black&#x27;, eyes: &#x27;black&#x27; &#125; ] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copy);<span class="comment">//&#123; name: &#x27;beni&#x27;, age: 30, custom: [ &#123; hair: &#x27;black&#x27;, eyes: &#x27;black&#x27; &#125; ] &#125;</span></span><br></pre></td></tr></table></figure><h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><hr><ul><li><a href="https://www.yes24.com/Product/Goods/108748841">쏙쏙 들어오는 함수형 코딩(심플한 코드로 복잡한 소프트웨어 길들이기)</a></li></ul>]]></content:encoded>
      
      <comments>https://sejoung.github.io/2024/01/2024-01-26-Grokking_Simplicity_6/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
